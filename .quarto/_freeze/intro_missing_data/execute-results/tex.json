{
  "hash": "85013ddae43770177a06559dced0e6c3",
  "result": {
    "markdown": "---\ntitle: \"An Introduction to Missing Data\"\nauthor: \"Maxime Rischard and Luke Miratrix\"\neditor: \n  markdown: \n    wrap: sentence\n---\n\n\n\n\n\n## Introduction\n\nHandling missing data is the icky, unglamorous part of any statistical analysis.\nIt is where the skeletons lie.\nThere's a range of options available, which are, broadly speaking:\n\n1.  Delete the observations with missing covariates (this is a \"complete case analysis\")\n2.  Plug in some kind of reasonable value for the missing covariate. This is called \"imputation.\" We discuss three ways of doing this that are increasingly sophisticated and layered on each other:\n\n<!-- -->\n\na.  Mean imputation. Simply take the mean of all the observations where you know the value, and then use that for anything that is missing.\nb.  Regression imputation. You generate regression equations describing how all the variables are connected, and use those to predict any missing value.\nc.  Stochastic regression imputation. Here we use regression imputation, but we also add some residual noise to all our imputed values so that our imputed values have as much variation as our actual values (otherwise our imputed values will tend to be all clumped together).\n\n<!-- -->\n\n3.  Multiply impute the missing data, by fully modeling the covariate and the missingness, and generating a range of complete datasets under this model. Here you end up with a bunch of complete datasets that are all \"reasonable guesses\" as to what the full dataset might have been. You then analyze each one, and aggregate your findings across them to get a final answer.\n\nThe first two general approaches are imperfect, while the third is often more work than the original analysis that we were hoping to perform.\nFor this course, doing a 2a, 2b, or 2c are all reasonable choices.\nIf you have very little missing data you can often get away with 1.\nWe have no expectations that people will take the plunge into #3 (multiple imputation).\nIn real life, people will often analyze their data with a complete case analysis and some other strategy, and then compare the results.\nIn Education, if missingness is below 10% people usually just do mean imputation, but regression imputation would probably be superior.\n\nThis handout provides an introduction to missing data, and includes a few commands to explore and deal with missing data.\nIn this document we first talk about exploring missing data (in particular getting plots that show you if you have any notable patterns in how things are missing) and then we give a brief walk-through of the 3 methods listed above.\n\nWe will the `mice` and `VIM` packages, which you can install using `install.packages()` if you have not yet done so.\nThese are simple and powerful packages for visualizing and imputing missing data.\nAt the end of this document we also describe the `Amelia` package.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(mice)\nlibrary(VIM)\n```\n:::\n\n\n\nThroughout we use a small built-in R dataset on air quality as a working example.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  data(airquality)\n  nrow(airquality)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 153\n```\n:::\n\n```{.r .cell-code}\n  head(airquality)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Ozone Solar.R Wind Temp Month Day\n1    41     190  7.4   67     5   1\n2    36     118  8.0   72     5   2\n3    12     149 12.6   74     5   3\n4    18     313 11.5   62     5   4\n5    NA      NA 14.3   56     5   5\n6    28      NA 14.9   66     5   6\n```\n:::\n\n```{.r .cell-code}\n  summary(airquality[1:4])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Ozone          Solar.R         Wind            Temp     \n Min.   :  1.0   Min.   :  7   Min.   : 1.70   Min.   :56.0  \n 1st Qu.: 18.0   1st Qu.:116   1st Qu.: 7.40   1st Qu.:72.0  \n Median : 31.5   Median :205   Median : 9.70   Median :79.0  \n Mean   : 42.1   Mean   :186   Mean   : 9.96   Mean   :77.9  \n 3rd Qu.: 63.2   3rd Qu.:259   3rd Qu.:11.50   3rd Qu.:85.0  \n Max.   :168.0   Max.   :334   Max.   :20.70   Max.   :97.0  \n NA's   :37      NA's   :7                                   \n```\n:::\n:::\n\n\n\n\\newpage\n\n## Visualizing missing data\n\nJust like with anything in statistics, the first thing to do is to look at our data.\nWe want to know which variables are often missing, and if some variables are often missing together.\nWe also want to know how much data is missing.\nThe mice package has a variety of plots to show us patterns of missingness:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  md.pattern(airquality)\n```\n\n::: {.cell-output-display}\n![](intro_missing_data_files/figure-pdf/unnamed-chunk-3-1.pdf){fig-align='center' fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n    Wind Temp Month Day Solar.R Ozone   \n111    1    1     1   1       1     1  0\n35     1    1     1   1       1     0  1\n5      1    1     1   1       0     1  1\n2      1    1     1   1       0     0  2\n       0    0     0   0       7    37 44\n```\n:::\n:::\n\n\n\nThis plot gives us the different missing data patterns and the number of observations that have each missing data pattern.\nFor example, the second row in the plot says there are 35 observations that have a missing data pattern where only Ozone is missing.\n\nEasier to understand patterns!\n\nWe can also just look at 10 observations to see everything that is going on.\nHere we take the first 10 rows of our dataset, but could also take a random 10 row with the tidyverse's `sample_n` method.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  airqualitysub = airquality[1:10, ]\n  airqualitysub\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Ozone Solar.R Wind Temp Month Day\n1     41     190  7.4   67     5   1\n2     36     118  8.0   72     5   2\n3     12     149 12.6   74     5   3\n4     18     313 11.5   62     5   4\n5     NA      NA 14.3   56     5   5\n6     28      NA 14.9   66     5   6\n7     23     299  8.6   65     5   7\n8     19      99 13.8   59     5   8\n9      8      19 20.1   61     5   9\n10    NA     194  8.6   69     5  10\n```\n:::\n:::\n\n\n\nWe see that we have one observation missing two covariates and one each of missing Ozone only and Solar.R only.\n\n### The VIM Package\n\nThe VIM package gives some alternate plots to explore missing data patterns.\nFor example, `aggr()`:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n aggr(airquality, col=c('navyblue','red'),\n      numbers=TRUE, sortVars=TRUE, labels=names(data),\n      cex.axis=.7, gap=3, prop=c(TRUE, FALSE), \n      ylab=c(\"Histogram of missing data\",\"Pattern\"))\n```\n\n::: {.cell-output-display}\n![](intro_missing_data_files/figure-pdf/unnamed-chunk-5-1.pdf){fig-align='center' fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n Variables sorted by number of missings: \n Variable  Count\n    Ozone 0.2418\n  Solar.R 0.0458\n     Wind 0.0000\n     Temp 0.0000\n    Month 0.0000\n      Day 0.0000\n```\n:::\n:::\n\n\n\nOn the left, we have the proportion of missing data for each variable in our dataset.\nWe can see that Ozone and Solar.R have missing values.\nOn the right, we have the joint distribution of missingness.\nWe can see that 111 observations have no missing values.\nFrom those with missing values, the majority have missing values for Ozone, some have missing values for Solar.R and only 2 observations have missing values for both Ozone and Solar.R.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  marginplot(airquality[1:2])\n```\n\n::: {.cell-output-display}\n![](intro_missing_data_files/figure-pdf/unnamed-chunk-6-1.pdf){fig-align='center' fig-pos='H'}\n:::\n:::\n\n\n\nHere we have a scatterplot for the first two variables in our dataset: Ozone and Solar.R.\nThese are the variables that have missing data.\nIn addition to the standard scatterplot we are familiar with, information about missingness is shown in the margins.\nThe red dots indicate observations with one or both values missing (so there can be a bunch of dots stacked up in the bottom-left corner).\nThe numbers (37, 7, and 2 tells us how many observations are missing either or both of these variables).\n\n\\newpage\n\n## Complete case analysis\n\nWorking with complete cases (dropping observations with any missing data on our outcome and predictors) is always an option.\nWe have been doing this in class and section.\nHowever, this can lead to substantial data loss, if we have a lot of missingness and it can heavily bias our results depending on why observations are missing.\n\nComplete case analysis is the R default.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  fit <- lm(Ozone ~ Wind, data = airquality )\n  summary(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = Ozone ~ Wind, data = airquality)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-51.57 -18.85  -4.87  15.23  90.00 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)    96.87       7.24   13.38  < 2e-16 ***\nWind           -5.55       0.69   -8.04  9.3e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 26.5 on 114 degrees of freedom\n  (37 observations deleted due to missingness)\nMultiple R-squared:  0.362,\tAdjusted R-squared:  0.356 \nF-statistic: 64.6 on 1 and 114 DF,  p-value: 9.27e-13\n```\n:::\n:::\n\n\n\nNote the listing in the summary of number of items deleted.\nYou can find out which rows were deleted:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## which rows/observations were deleted\n  deleted <- na.action(fit)\n  deleted\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  5  10  25  26  27  32  33  34  35  36  37  39  42  43  45  46  52  53  54  55 \n  5  10  25  26  27  32  33  34  35  36  37  39  42  43  45  46  52  53  54  55 \n 56  57  58  59  60  61  65  72  75  83  84 102 103 107 115 119 150 \n 56  57  58  59  60  61  65  72  75  83  84 102 103 107 115 119 150 \nattr(,\"class\")\n[1] \"omit\"\n```\n:::\n\n```{.r .cell-code}\n  naprint(deleted)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"37 observations deleted due to missingness\"\n```\n:::\n:::\n\n\n\nWe have more incomplete rows if we add Solar.R as predictor.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  fit2 <- lm(Ozone ~ Wind+Solar.R, data=airquality)\n  naprint(na.action(fit2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"42 observations deleted due to missingness\"\n```\n:::\n:::\n\n\n\nWe can also drop observations with missing data ourselves instead of letting R do it for us.\n**Dropping data preemptively is generally a good idea, especially if you plan on using predict().**\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## complete cases on all variables in the data set \ncomplete.v1 = filter( airquality, complete.cases(airquality) )\n  \n## drop observations with missing values, but ignoring a specific variable  \ncomplete.v2 = filter(airquality, complete.cases(select( airquality, -Wind) ) )\n\n## drop observations with missing values on a specific variable  \ncomplete.v3 = filter(airquality, !is.na(Ozone))\n```\n:::\n\n\n\n\n\nOnce you have subset your data, you just analyze what is left as normal.\nEasy as pie!\n\n## Mean imputation\n\nInstead of dropping observations with missing values, we can plug in some kind of reasonable value for the missing value, e.g. the grand/global mean.\nWhile this can be statistically questionable, it does allow us to use the information provided by that unit's outcome and other covariates, without, we hope, unduly affecting the analysis of the missing covariate.\n\nGenerally, people will first plug in the mean value for anything missing, but then also make a dummy variable of whether that observation had a missing value there (or sometimes any missing value).\nYou would then include both the original vector of covariates (with the means plugged in) along with the dummy variable in subsequent regressions and analyses.\n\n### Doing Mean Imputation manually\n\nManually, we can just replace missing values for a variable with the grand/global mean.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## make a new copy of the data\n  data.mean.impute = airquality\n  \n## select the observations with missing Ozone\n  miss.ozone = is.na(data.mean.impute$Ozone)\n  \n## replace those NAs with mean(Ozone)\n  data.mean.impute[miss.ozone,\"Ozone\"] = mean(airquality$Ozone, na.rm=TRUE)\n```\n:::\n\n\n\n\n\nIn a multi-level context, it might make more sense to impute using the group mean rather than the grand mean.\nHere's a generic function to do it.\nHere we group by month:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## a function that replaces missing values in a vector \n## by the mean of the other values\n  mean.impute = function(y) { \n      y[is.na(y)] = mean(y, na.rm=TRUE)\n      return(y)\n  }\n\n  data.mean.impute = airquality %>% group_by(Month) %>%\n    mutate(Ozone = mean.impute(Ozone),\n           Solar.R = mean.impute(Solar.R) ) \n```\n:::\n\n\n\nWe have mean imputed the Ozone column and the Solar.R column\n\n### Mean imputation with the Mice package\n\nWe can use the `mice` package to do mean imputation.\nThe mice package is a package that can do some quite complex imputation, and so when you call `mice()` (which says \"impute missing values please\") you get back a rather complex object telling you what mice imputed, for whom, etc.\nThis object, which is a `mids` object (see `help(mids)`), contains the multiply imputed dataset (or in our case, so far, singly imputed).\nThe `mice` package then provides a lot of nice functions allowing you to get your imputed information out of this object.\n\nWe first demonstrate this for the 10 observations sampled above.\nMice is generally going to be a two-step process: impute data, get completed dataset.\n\nFor step 1:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  imp <- mice(airqualitysub, method=\"mean\", m=1, maxit=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n iter imp variable\n  1   1  Ozone  Solar.R\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Number of logged events: 1\n```\n:::\n\n```{.r .cell-code}\n  imp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nClass: mids\nNumber of multiple imputations:  1 \nImputation methods:\n  Ozone Solar.R    Wind    Temp   Month     Day \n \"mean\"  \"mean\"      \"\"      \"\"      \"\"      \"\" \nPredictorMatrix:\n        Ozone Solar.R Wind Temp Month Day\nOzone       0       1    1    1     0   1\nSolar.R     1       0    1    1     0   1\nWind        1       1    0    1     0   1\nTemp        1       1    1    0     0   1\nMonth       1       1    1    1     0   1\nDay         1       1    1    1     0   0\nNumber of logged events:  1 \n  it im dep     meth   out\n1  0  0     constant Month\n```\n:::\n:::\n\n\n\nFor step 2:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  cmp = complete(imp)\n  cmp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Ozone Solar.R Wind Temp Month Day\n1   41.0     190  7.4   67     5   1\n2   36.0     118  8.0   72     5   2\n3   12.0     149 12.6   74     5   3\n4   18.0     313 11.5   62     5   4\n5   23.1     173 14.3   56     5   5\n6   28.0     173 14.9   66     5   6\n7   23.0     299  8.6   65     5   7\n8   19.0      99 13.8   59     5   8\n9    8.0      19 20.1   61     5   9\n10  23.1     194  8.6   69     5  10\n```\n:::\n:::\n\n\n\nWe see there are no missing values in `cmp`.\nThey were all imputed with the mean of the other non-missing values.\nThis is **mean imputation**.\n\nNow let's impute the full dataset.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  imp <- mice(airquality, method=\"mean\", m=1, maxit=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n iter imp variable\n  1   1  Ozone  Solar.R\n```\n:::\n\n```{.r .cell-code}\n  cmp = complete( imp )\n```\n:::\n\n\n\nWe next make a dummy variable for each row of our data noting whether anything was imputed or not.\nWe use the `ici` (Incomplete Case Indication) function to list all rows with any missing values.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  head( ici(airquality) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE FALSE  TRUE  TRUE\n```\n:::\n:::\n\n\n\nNote how we have a TRUE or FALSE for each row of our data.\n\nWe then store this as a covariate in our completed dataset:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  cmp$imputed = ici(airquality)\n  head( cmp )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Ozone Solar.R Wind Temp Month Day imputed\n1  41.0     190  7.4   67     5   1   FALSE\n2  36.0     118  8.0   72     5   2   FALSE\n3  12.0     149 12.6   74     5   3   FALSE\n4  18.0     313 11.5   62     5   4   FALSE\n5  42.1     186 14.3   56     5   5    TRUE\n6  28.0     186 14.9   66     5   6    TRUE\n```\n:::\n:::\n\n\n\n#### How well did mean imputation work?\n\nMean imputation has problems.\nThe imputed values will all be the same, and thus when we look at how much variation is in our variables after imputation, it will go down.\nCompare the SD of our completed dataset Ozone values to the SD of the Ozone values for our non-missing values.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  sd( airquality$Ozone, na.rm=TRUE )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 33\n```\n:::\n\n```{.r .cell-code}\n  sd( cmp$Ozone )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 28.7\n```\n:::\n:::\n\n\n\nNext, let's look at some plots of our completed data, coloring the points by whether they were imputed.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot( cmp, aes(x=Ozone, col=imputed) ) +\n    stat_bin( geom=\"step\", position=\"identity\",\n              breaks=seq(-20, 200, 10) )\n```\n\n::: {.cell-output-display}\n![](intro_missing_data_files/figure-pdf/unnamed-chunk-21-1.pdf){fig-align='center' fig-pos='H'}\n:::\n\n```{.r .cell-code}\nggplot( cmp, aes(y=Ozone, x=Solar.R, col=imputed) ) +\n    geom_point() +\n    labs( y=\"Ozone (ppb)\", x=\"Solar Radiation (lang)\" )\n```\n\n::: {.cell-output-display}\n![](intro_missing_data_files/figure-pdf/unnamed-chunk-21-2.pdf){fig-align='center' fig-pos='H'}\n:::\n:::\n\n\n\nWhat we see in the above plots is that our imputed observations do not look like the rest of our data because one (or both) of their values always is in the exact center.\nThis creates the \"+\" shape.\nIt also gives the big spike at the mean for the histogram.\n\n#### Important Aside: Namespaces and function collisions\n\nWe now need to discuss a sad aspect of R.\nThe short story is, different packages have functions with the same names and so if you have both packages loaded you will need to specify which package to use when calling such a function.\nYou can do this by giving the \"surname\" of the function at the beginning of the function call (like, I believe, the Chinese).\nThis comes up because for us the method `complete()` exists both in the tidyverse and in mice.\nIn tidyverse, `complete()` fills in rows of missing combinations of values.\nIn mice, `complete()` gives us a completed dataset after we have made an imputation call.\n\nIt turns out that since we loaded tidyverse first and mice second, the mice's `complete()` method is the default.\nBut if we loaded the packages in the other order, we would get strange errors.\nTo be clear, we thus tell R to use `mice` by writing:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  cmp = mice::complete( imp )\n```\n:::\n\n\n\nIn general, you can detect such \"namespace collisions\" by noticing weird error messages all of a sudden when you don't expect them.\nYou can then type, for example, `help( complete )` and it will list all the different `complete`s around.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  help( complete )\n```\n:::\n\n\n\nAlso when you load a package it will write down what functions are getting mixed up for you.\nIf you were looking at your R code you would get something like this:\n\n```         \ntidyr::complete() masks mice::complete()\n```\n\n## Regression imputation\n\nRegression imputation is half way between mean imputation and multiple imputation.\nIn regression imputation we predict what values we expect for anything missing based on the other values of the observation.\nFor example, if we know that urban/rural is correlated with race, we might impute a different value for race if we know an observation came from an urban environment vs. rural.\nWe do this with regression: we fit a model predicting each variable using the others and then use that regression model to predict any missing values.\n\nWe can do this manually, but then it gets very hard when multiple variables are missing for a given observation.\nThe mice package is more clever: it does variables one at a time, and the cycles around so everything can get imputed.\n\n### Manually\n\nHere is how to use other variables to predict missing values.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  ic( airqualitysub )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Ozone Solar.R Wind Temp Month Day\n5     NA      NA 14.3   56     5   5\n6     28      NA 14.9   66     5   6\n10    NA     194  8.6   69     5  10\n```\n:::\n\n```{.r .cell-code}\n  fit <- lm(Ozone ~ Solar.R, data=airqualitysub)\n\n## predict for missing ozone  \n  need.pred = subset( airqualitysub, is.na( Ozone ) )\n  need.pred\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Ozone Solar.R Wind Temp Month Day\n5     NA      NA 14.3   56     5   5\n10    NA     194  8.6   69     5  10\n```\n:::\n\n```{.r .cell-code}\n  pred <- predict(fit, newdata=need.pred)\n  pred\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   5   10 \n  NA 23.1 \n```\n:::\n:::\n\n\n\nBut now we have to merge back in, and we didn't solve for case 5 because we are missing the variable we would use to predict the other missing variable.\nIck.\nThis is where missing data gets *really* hard (when we have multiple missing values on multiple variables).\nSo let's quit now and turn to a package that will handle all of this for us.\n\n### Mice\n\nTo do regression imputation using mice, we simply call the `mice()` method:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  imp <- mice(airquality[,1:2], method=\"norm.predict\", m=1, maxit=3,seed=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n iter imp variable\n  1   1  Ozone  Solar.R\n  2   1  Ozone  Solar.R\n  3   1  Ozone  Solar.R\n```\n:::\n:::\n\n\n\nWe have everything!\nHow did it do it?\nBy *chaining equations*.\nFirst we start with mean imputation.\nThen we use our fit model to predict for one covariate, and then we use those predicted scores to predict for the next covariate, and so forth.\nWe cycle back and then everything is jointly predicting everything else.\n\nThe `complete()` method gives us a complete dataset with everything imputed.\nLike so:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  cdat = mice::complete( imp )\n  head( cdat )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Ozone Solar.R\n1  41.0     190\n2  36.0     118\n3  12.0     149\n4  18.0     313\n5  42.7     186\n6  28.0     169\n```\n:::\n\n```{.r .cell-code}\n  nrow( cdat )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 153\n```\n:::\n\n```{.r .cell-code}\n  nrow( airquality )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 153\n```\n:::\n:::\n\n\n\nNext we make a variable of which cases have imputed values and not (any row with missing data must have been partially imputed.)\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  cdat$imputed = ici( airquality )\n```\n:::\n\n\n\nAnd see our results!\nCompare to mean imputation, above.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot( cdat, aes(x=Ozone, col=imputed) ) +\n    stat_bin( geom=\"step\", position=\"identity\",\n              breaks=seq(-20, 200, 10) )\n```\n\n::: {.cell-output-display}\n![](intro_missing_data_files/figure-pdf/unnamed-chunk-28-1.pdf){fig-align='center' fig-pos='H'}\n:::\n\n```{.r .cell-code}\nggplot( cdat, aes(y=Ozone, x=Solar.R, col=imputed) ) +\n    geom_point() +\n    labs( y=\"Ozone (ppb)\", x=\"Solar Radiation (lang)\" )\n```\n\n::: {.cell-output-display}\n![](intro_missing_data_files/figure-pdf/unnamed-chunk-28-2.pdf){fig-align='center' fig-pos='H'}\n:::\n:::\n\n\n\nThis is better than mean imputation.\nSee how we impute different Ozone for different Solar Radiation values, taking advantage of the information of knowing that they are correlated?\nBut it still is obvious what is mean imputed and what is not.\nAlso, the variance of our imputed values still does not contain the residual variation around the predicted values that we would get in real data.\nWe can do one more enhancement to fix this.\n\n### Stochastic regression imputation\n\nWe extend regression imputation by randomly drawing observations that *look like* real ones.\nSee in the two imputations below we get slightly different values for our imputed data.\n\nHere we do it on our mini-dataset and look at the imputed values for our observations with missing values only:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  imp <- mice(airqualitysub[,1:2],method=\"norm.nob\",m=1,maxit=1,seed=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n iter imp variable\n  1   1  Ozone  Solar.R\n```\n:::\n\n```{.r .cell-code}\n  imp$imp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Ozone\n       1\n5   8.09\n10 44.58\n\n$Solar.R\n      1\n5 181.2\n6  83.7\n```\n:::\n\n```{.r .cell-code}\n  imp <- mice(airqualitysub[,1:2],method=\"norm.nob\",m=1,maxit=1,seed=4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n iter imp variable\n  1   1  Ozone  Solar.R\n```\n:::\n\n```{.r .cell-code}\n  imp$imp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Ozone\n      1\n5  34.4\n10 31.6\n\n$Solar.R\n    1\n5 381\n6 260\n```\n:::\n:::\n\n\n\nNow let's do it on the full data and look at the imputed values and compare to our plots above.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  imp <- mice(airquality[,1:2],method=\"norm.nob\",m=1,maxit=1,seed=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n iter imp variable\n  1   1  Ozone  Solar.R\n```\n:::\n\n```{.r .cell-code}\n  cdat = mice::complete( imp )\n  cdat$imputed = ici( airquality )\n\n  ggplot( cdat, aes(x=Ozone, col=imputed) ) +\n    stat_bin( geom=\"step\", position=\"identity\",\n              breaks=seq(-20, 200, 10) )\n```\n\n::: {.cell-output-display}\n![](intro_missing_data_files/figure-pdf/unnamed-chunk-30-1.pdf){fig-align='center' fig-pos='H'}\n:::\n\n```{.r .cell-code}\n  ggplot( cdat, aes(y=Ozone, x=Solar.R, col=imputed) ) +\n    geom_point() +\n    labs( y=\"Ozone (ppb)\", x=\"Solar Radiation (lang)\" )\n```\n\n::: {.cell-output-display}\n![](intro_missing_data_files/figure-pdf/unnamed-chunk-30-2.pdf){fig-align='center' fig-pos='H'}\n:::\n:::\n\n\n\nBetter, but not perfect.\nWhat is better?\nWhat is still not perfect?\n\n## Multiple imputation\n\nIf missing data is a significant issue in your dataset, then mean or regression imputation can be a bit too hacky and approximate.\nIn these contexts, multiple imputation is the way to go.\n\nWe do this as follows:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  imp <- mice(airqualitysub, seed=2, print=FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Number of logged events: 1\n```\n:::\n\n```{.r .cell-code}\n  imp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nClass: mids\nNumber of multiple imputations:  5 \nImputation methods:\n  Ozone Solar.R    Wind    Temp   Month     Day \n  \"pmm\"   \"pmm\"      \"\"      \"\"      \"\"      \"\" \nPredictorMatrix:\n        Ozone Solar.R Wind Temp Month Day\nOzone       0       1    1    1     0   1\nSolar.R     1       0    1    1     0   1\nWind        1       1    0    1     0   1\nTemp        1       1    1    0     0   1\nMonth       1       1    1    1     0   1\nDay         1       1    1    1     0   0\nNumber of logged events:  1 \n  it im dep     meth   out\n1  0  0     constant Month\n```\n:::\n\n```{.r .cell-code}\n  imp$imp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Ozone\n    1  2  3  4  5\n5  18 41 28 23 23\n10 36 18 36 19 28\n\n$Solar.R\n    1  2   3  4  5\n5 149 99 194 99 19\n6 194 19 194 19 19\n\n$Wind\n[1] 1 2 3 4 5\n<0 rows> (or 0-length row.names)\n\n$Temp\n[1] 1 2 3 4 5\n<0 rows> (or 0-length row.names)\n\n$Month\n[1] 1 2 3 4 5\n<0 rows> (or 0-length row.names)\n\n$Day\n[1] 1 2 3 4 5\n<0 rows> (or 0-length row.names)\n```\n:::\n:::\n\n\n\nSee multiple columns of imputed data?\n(We have 5 here.)\n\n**First aside:** All variables you'll be using for your model should be included in the imputation model.\nNotice we included the full dataset in `mice`, not just the variables with missing values.\nThis way we can account for associations between all the outcome and the predictors in the model we'll be fitting.\nYour imputation model can be more complicated than your model of interest.\nThat is, you can include additional variables that predict missing values but will not be part of your final model of interest.\n\n**Second aside:** All variables in your imputation model should be in the correct functional form!\nQuadratic, higher order polynomials and interaction terms are just another variable that we need to impute.\nAlthough it may seem logical to impute your variables first and then calculate the interaction or non-linear term, this can lead to bias.\n\n**Third aside:** The ordering of the variables in the dataset you are feeding into `mice` can make a difference in results and model convergence.\nGenerally, you want to order your variables from least to most missing.\nHere, we reorder the variables from least to most missing, and obtain different results.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  test = airqualitysub[,c(6,5,4,3,2,1)]\n  head(test)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Day Month Temp Wind Solar.R Ozone\n1   1     5   67  7.4     190    41\n2   2     5   72  8.0     118    36\n3   3     5   74 12.6     149    12\n4   4     5   62 11.5     313    18\n5   5     5   56 14.3      NA    NA\n6   6     5   66 14.9      NA    28\n```\n:::\n\n```{.r .cell-code}\n  test.imp <- mice(test, seed=2, print=FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Number of logged events: 1\n```\n:::\n\n```{.r .cell-code}\n  test.imp$imp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Day\n[1] 1 2 3 4 5\n<0 rows> (or 0-length row.names)\n\n$Month\n[1] 1 2 3 4 5\n<0 rows> (or 0-length row.names)\n\n$Temp\n[1] 1 2 3 4 5\n<0 rows> (or 0-length row.names)\n\n$Wind\n[1] 1 2 3 4 5\n<0 rows> (or 0-length row.names)\n\n$Solar.R\n    1   2   3   4   5\n5 194 118 194 313 190\n6 118 194 118 118 190\n\n$Ozone\n    1  2  3  4  5\n5  18 23 23 23 41\n10 12  8 18 19  8\n```\n:::\n:::\n\n\n\n**How to get each complete dataset?**\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## first complete dataset \n  mice::complete(imp, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Ozone Solar.R Wind Temp Month Day\n1     41     190  7.4   67     5   1\n2     36     118  8.0   72     5   2\n3     12     149 12.6   74     5   3\n4     18     313 11.5   62     5   4\n5     18     149 14.3   56     5   5\n6     28     194 14.9   66     5   6\n7     23     299  8.6   65     5   7\n8     19      99 13.8   59     5   8\n9      8      19 20.1   61     5   9\n10    36     194  8.6   69     5  10\n```\n:::\n\n```{.r .cell-code}\n## and our second complete dataset\n  mice::complete(imp, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Ozone Solar.R Wind Temp Month Day\n1     41     190  7.4   67     5   1\n2     36     118  8.0   72     5   2\n3     12     149 12.6   74     5   3\n4     18     313 11.5   62     5   4\n5     41      99 14.3   56     5   5\n6     28      19 14.9   66     5   6\n7     23     299  8.6   65     5   7\n8     19      99 13.8   59     5   8\n9      8      19 20.1   61     5   9\n10    18     194  8.6   69     5  10\n```\n:::\n:::\n\n\n\nSee how they are different?\nThey were randomly imputed.\nWe basically used the stochastic regression thing, above, multiple times.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  mice::complete(imp, 1)[ ici(airqualitysub), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Ozone Solar.R Wind Temp Month Day\n5     18     149 14.3   56     5   5\n6     28     194 14.9   66     5   6\n10    36     194  8.6   69     5  10\n```\n:::\n\n```{.r .cell-code}\n  mice::complete(imp, 2)[ ici(airqualitysub), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Ozone Solar.R Wind Temp Month Day\n5     41      99 14.3   56     5   5\n6     28      19 14.9   66     5   6\n10    18     194  8.6   69     5  10\n```\n:::\n:::\n\n\n\nOn full data:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  imp <- mice(airquality, seed=1, print=FALSE)\n```\n:::\n\n\n\nNow we estimate for each imputed dataset using the `with()` method that, in `mice`, will do the regression for each completed dataset.\nSee `help with.mids`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  fit <- with(imp, lm(Ozone ~ Wind + Temp + Solar.R))\n  fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncall :\nwith.mids(data = imp, expr = lm(Ozone ~ Wind + Temp + Solar.R))\n\ncall1 :\nmice(data = airquality, printFlag = FALSE, seed = 1)\n\nnmis :\n  Ozone Solar.R    Wind    Temp   Month     Day \n     37       7       0       0       0       0 \n\nanalyses :\n[[1]]\n\nCall:\nlm(formula = Ozone ~ Wind + Temp + Solar.R)\n\nCoefficients:\n(Intercept)         Wind         Temp      Solar.R  \n   -66.2402      -2.8219       1.6134       0.0563  \n\n\n[[2]]\n\nCall:\nlm(formula = Ozone ~ Wind + Temp + Solar.R)\n\nCoefficients:\n(Intercept)         Wind         Temp      Solar.R  \n   -71.2842      -2.9055       1.6749       0.0633  \n\n\n[[3]]\n\nCall:\nlm(formula = Ozone ~ Wind + Temp + Solar.R)\n\nCoefficients:\n(Intercept)         Wind         Temp      Solar.R  \n   -66.9511      -2.9322       1.6479       0.0543  \n\n\n[[4]]\n\nCall:\nlm(formula = Ozone ~ Wind + Temp + Solar.R)\n\nCoefficients:\n(Intercept)         Wind         Temp      Solar.R  \n   -33.8480      -3.6628       1.3244       0.0427  \n\n\n[[5]]\n\nCall:\nlm(formula = Ozone ~ Wind + Temp + Solar.R)\n\nCoefficients:\n(Intercept)         Wind         Temp      Solar.R  \n   -77.4163      -2.7438       1.7264       0.0663  \n```\n:::\n:::\n\n\n\nThis can take *any* function call that takes a formula.\nSo `glm`, `lm`, whatever... We can then pool the estimates using the standard theory of combining multiply imputed datasets.\nThe basic idea is to combine the variation/uncertainty of the multiple sets with the average uncertainty we would have for each set if it was truly complete and not imputed.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  tab <- summary(pool(fit))\n  colnames( tab )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"term\"      \"estimate\"  \"std.error\" \"statistic\" \"df\"        \"p.value\"  \n```\n:::\n\n```{.r .cell-code}\n  tab[,c(1:3,5)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         term estimate std.error   df\n1 (Intercept) -63.1480   26.6769 13.8\n2        Wind  -3.0132    0.6831 24.0\n3        Temp   1.5974    0.2742 19.6\n4     Solar.R   0.0566    0.0222 52.4\n```\n:::\n:::\n\n\n\n**Aside:** You will notice that once we fit our model on the imputed data, `with()` returned an object of class `mira`.\n`Mira` objects can be pooled to get the pooled estimates, whereas objects of class `glm`, `lm`, `lmer`, etc. cannot be pooled.\nYou will also notice that you cannot use `predict` with a `mira` object.\nTo use `predict`, you can stack the imputed datasets and fit your model on this complete dataset.\nParameter estimates generated by `pool` are the average of the parameter estimates from the model fit on each imputed dataset separately.\nSo your coefficients are fine.\nHowever, your SEs will be underestimated.\nHow underestimated your SEs will be depends, to an extent, on how much data is missing and whether it is missing at random.\n\nOur old, sad method:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  fit <- lm(Ozone~Wind+Temp+Solar.R,data=airquality,na.action=na.omit)\n  summary( fit )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = Ozone ~ Wind + Temp + Solar.R, data = airquality, \n    na.action = na.omit)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-40.48 -14.22  -3.55  10.10  95.62 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -64.3421    23.0547   -2.79   0.0062 ** \nWind         -3.3336     0.6544   -5.09  1.5e-06 ***\nTemp          1.6521     0.2535    6.52  2.4e-09 ***\nSolar.R       0.0598     0.0232    2.58   0.0112 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 21.2 on 107 degrees of freedom\n  (42 observations deleted due to missingness)\nMultiple R-squared:  0.606,\tAdjusted R-squared:  0.595 \nF-statistic: 54.8 on 3 and 107 DF,  p-value: <2e-16\n```\n:::\n\n```{.r .cell-code}\n  round(coef(summary(fit)),3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Estimate Std. Error t value Pr(>|t|)\n(Intercept)   -64.34     23.055   -2.79    0.006\nWind           -3.33      0.654   -5.09    0.000\nTemp            1.65      0.254    6.52    0.000\nSolar.R         0.06      0.023    2.58    0.011\n```\n:::\n:::\n\n\n\nIn this case, the missing data estimates are basically the same as the complete case analysis, it appears.\nWe only had 5% missing data though.\n\n## Extensions\n\n### Non-continuous variables\n\nEverything shown above can easily be extended to non-continuous variables.\nThe easiest way to do this is using the `mice` package.\nIt allows you to specify the type of variable you are imputing, e.g. dichotomous or categorical.\n`Mice` will automatically detect and handle non-continuous variables.\nYou can also specify these variables yourself.\nHere is an example using `nhanes` data (another built-in R dataset).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## load data \n  data(nhanes2)\n  head(nhanes2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    age  bmi  hyp chl\n1 20-39   NA <NA>  NA\n2 40-59 22.7   no 187\n3 20-39   NA   no 187\n4 60-99   NA <NA>  NA\n5 20-39 20.4   no 113\n6 60-99   NA <NA> 184\n```\n:::\n\n```{.r .cell-code}\n## create some missing values for an ordered categorical variable\n  nhanes2$age[1:5] = NA\n  head(nhanes2) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    age  bmi  hyp chl\n1  <NA>   NA <NA>  NA\n2  <NA> 22.7   no 187\n3  <NA>   NA   no 187\n4  <NA>   NA <NA>  NA\n5  <NA> 20.4   no 113\n6 60-99   NA <NA> 184\n```\n:::\n\n```{.r .cell-code}\n## impute 5 datasets \n  imp.cat <- mice(nhanes2, m = 5, print=FALSE)     \n  full.cat = mice::complete(imp.cat)           ## print the first imputed data set\n  head(full.cat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    age  bmi hyp chl\n1 40-59 21.7 yes 187\n2 40-59 22.7  no 187\n3 20-39 27.5  no 187\n4 60-99 24.9 yes 218\n5 40-59 20.4  no 113\n6 60-99 24.9 yes 184\n```\n:::\n:::\n\n\n\nWe can check what imputation method `mice` used for each variable:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  imp.cat$method\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      age       bmi       hyp       chl \n\"polyreg\"     \"pmm\"  \"logreg\"     \"pmm\" \n```\n:::\n:::\n\n\n\nWe can see that `mice` used the `polyreg` imputation method for the variable *age*, which means it treated it as an unordered categorical variable.\nBut this is an ordered variable: higher values categories signified older age.\nWe can manually force `mice` to treat *age* as an ordered categorical variable.\nWe will keep the imputation methods for the remaining variables the same.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  imp.cat2 <- mice(nhanes2, meth=c(\"polr\",\"pmm\",\"logreg\",\"pmm\"), m=5, print=FALSE)\n  head(mice::complete(imp.cat2, 1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    age  bmi hyp chl\n1 40-59 27.5 yes 184\n2 60-99 22.7  no 187\n3 60-99 20.4  no 187\n4 20-39 35.3  no 184\n5 40-59 20.4  no 113\n6 60-99 22.7  no 184\n```\n:::\n\n```{.r .cell-code}\n  imp.cat2$method\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     age      bmi      hyp      chl \n  \"polr\"    \"pmm\" \"logreg\"    \"pmm\" \n```\n:::\n:::\n\n\n\n### Multi-level data\n\nMultilevel data gets more tricky: should we impute taking into account cluster?\nHow do we do that?\n\nFor an initial pass, I would recommend simply doing regression imputation *ignoring* cluster/grouping, and then adding in that dummy variable of whether a value is imputed.\n\n### Longitudinal data\n\nWith longitudinal data we can often use all our data even for individuals with missing data on the outcome, if we assume data are MAR (\"Missing at Random\").\nMAR means that conditional on the observed data, missingness may depend on any observed data, but not on unobserved data.\nwe explore our missing data on individuals over time and on outcomes as above to get a sense of whether MAR is a reasonable assumption or not.\nThen `lmer` basically handles the rest for us, as far as we have enough observations per individual, on average, to estimate the number of random effects we are trying to estimate.\nWith respect to missing data on covariates or predictors, you can handle those with one of the methods described above.\n\nHere we show how to explore missing data in longitudinal analysis using data on toenail detachment, which you will see in the unit on generalized MLMs.\nThe data is from a RCT where patients were getting a different type of drug to prevent toenail detachment (the outcome).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## load data\n  toes = foreign::read.dta( \"data/toenail.dta\" )\n```\n:::\n\n\n\n\n\nFirst, let's look at how many times patients were observed.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## how many time points per patient?\n  table( table( toes$patient ) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  1   2   3   4   5   6   7 \n  5   3   7   6  10  39 224 \n```\n:::\n:::\n\n\n\nWe have 224 patients observed at all 7 time points, and the rest of the patients are observed at fewer time points, between 1 and 6.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## define function \nsummarise.patient = function( patient ) {\n    pat = rep( \".\", 7 )\n    pat[ patient$visit ] = 'X'\n    paste( pat, collapse=\"\" )\n}\n  ## For each patient, this code makes a string of \".\" \n  ## then it replaces all dots with an \"X\" if we have data for that visit\n\n## summarize missingness  \nmiss = toes %>% group_by( patient ) %>%\n    do( pattern = summarise.patient(.) ) %>%\n    unnest(cols = c(pattern))\n  ## Group the data by patient \n  ## Then use the do() command on each chunk of our dataframe\n  ## The \".\" means \"the chunk\" (it is a pronoun, essentially).  \n  ## This code creates a list of character vectors\n  ## The unnest() takes our character vector out of this list made by \"do\"\n\nhead( miss )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 2\n  patient pattern\n    <dbl> <chr>  \n1       1 XXXXXXX\n2       2 XXXXXX.\n3       3 XXXXXXX\n4       4 XXXXXXX\n5       6 XXXXXXX\n6       7 XXXXXXX\n```\n:::\n:::\n\n\n\nHere we see the different patterns of missing outcomes, i.e., when patients leave and if they come back.\nWhen patients leave and never come back, regardless of the time point (see lines 4 and 5), we have monotone missingness.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## sort missing patterns in decreasing order\n## starting with no missingness \nsort( table( miss$pattern ), decreasing=TRUE )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nXXXXXXX XXXXX.X XXXX.XX XXX.... X...... XXXXX.. XXXX... XX..... XXX.XXX XXXXXX. \n    224      21      10       6       5       5       4       3       3       3 \nXXX.X.. XXXX..X X.XXXXX XX..X.. XX.XXX. XX.XXXX XXX..XX XXX.X.X \n      2       2       1       1       1       1       1       1 \n```\n:::\n\n```{.r .cell-code}\n## summarize number of data patterns \nmiss = miss %>% group_by( pattern ) %>%\n    summarise( n=n() )\nmiss = arrange( miss, -n )\nmiss\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 18 x 2\n   pattern     n\n   <chr>   <int>\n 1 XXXXXXX   224\n 2 XXXXX.X    21\n 3 XXXX.XX    10\n 4 XXX....     6\n 5 X......     5\n 6 XXXXX..     5\n 7 XXXX...     4\n 8 XX.....     3\n 9 XXX.XXX     3\n10 XXXXXX.     3\n11 XXX.X..     2\n12 XXXX..X     2\n13 X.XXXXX     1\n14 XX..X..     1\n15 XX.XXX.     1\n16 XX.XXXX     1\n17 XXX..XX     1\n18 XXX.X.X     1\n```\n:::\n\n```{.r .cell-code}\n## percent missing data (224 complete cases)\n224 / sum( miss$n )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.762\n```\n:::\n\n```{.r .cell-code}\n  ## 76% of patients with complete data\n```\n:::\n\n\n\nSecond, we look at patterns of missing outcomes.\nThe outcome here is toenail detachment.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## reshape data to wide \n  dat.wide = reshape( toes2, direction=\"wide\", v.names=\"outcome\",\n                    idvar=\"patient\", timevar = \"visit\" )\n  head( dat.wide )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   patient treatment           Tx outcome.1 outcome.2 outcome.3 outcome.4\n1        1         1 Itraconazole         1         1         1         0\n8        2         0  Terbinafine         0         0         1         1\n14       3         0  Terbinafine         0         0         0         0\n21       4         0  Terbinafine         1         0         0         0\n28       6         1 Itraconazole         1         1         1         0\n35       7         1 Itraconazole         0         0         0         0\n   outcome.5 outcome.6 outcome.7\n1          0         0         0\n8          0         0        NA\n14         0         0         1\n21         0         0         0\n28         0         0         0\n35         1         1         1\n```\n:::\n\n```{.r .cell-code}\n## looking at missing data with mice package\n  md.pattern( dat.wide )\n```\n\n::: {.cell-output-display}\n![](intro_missing_data_files/figure-pdf/unnamed-chunk-47-1.pdf){fig-align='center' fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n    patient treatment Tx outcome.1 outcome.2 outcome.3 outcome.4 outcome.7\n224       1         1  1         1         1         1         1         1\n21        1         1  1         1         1         1         1         1\n10        1         1  1         1         1         1         1         1\n2         1         1  1         1         1         1         1         1\n3         1         1  1         1         1         1         1         0\n5         1         1  1         1         1         1         1         0\n4         1         1  1         1         1         1         1         0\n3         1         1  1         1         1         1         0         1\n1         1         1  1         1         1         1         0         1\n1         1         1  1         1         1         1         0         1\n2         1         1  1         1         1         1         0         0\n6         1         1  1         1         1         1         0         0\n1         1         1  1         1         1         0         1         1\n1         1         1  1         1         1         0         1         0\n1         1         1  1         1         1         0         0         0\n3         1         1  1         1         1         0         0         0\n1         1         1  1         1         0         1         1         1\n5         1         1  1         1         0         0         0         0\n          0         0  0         0         6        11        22        30\n    outcome.5 outcome.6    \n224         1         1   0\n21          1         0   1\n10          0         1   1\n2           0         0   2\n3           1         1   1\n5           1         0   2\n4           0         0   3\n3           1         1   1\n1           1         0   2\n1           0         1   2\n2           1         0   3\n6           0         0   4\n1           1         1   1\n1           1         1   2\n1           1         0   4\n3           0         0   5\n1           1         1   1\n5           0         0   6\n           31        50 150\n```\n:::\n\n```{.r .cell-code}\n## Another way to generating missingness patterns is to create a function\n## This function takes the visits and outcomes and puts a 1 or 0 if there is an\n## outcome and a dot if missing.\nmake.pat = function( visit, outcome ) {\n    pat = rep( \".\", 7 )\n    pat[ visit ] = outcome\n    paste( pat, collapse=\"\" )\n}\n\n## call our function on all our patients.\noutcomes = toes %>% group_by( patient ) %>%\n    summarise( tx = Tx[[1]],\n               num.obs = n(),\n               num.detach = sum( outcome ),\n               out = make.pat( visit, outcome ) )\n\nhead( outcomes, 20 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 x 5\n   patient tx           num.obs num.detach out    \n     <dbl> <fct>          <int>      <dbl> <chr>  \n 1       1 Itraconazole       7          3 1110000\n 2       2 Terbinafine        6          2 001100.\n 3       3 Terbinafine        7          1 0000001\n 4       4 Terbinafine        7          1 1000000\n 5       6 Itraconazole       7          3 1110000\n 6       7 Itraconazole       7          3 0000111\n 7       9 Itraconazole       7          0 0000000\n 8      10 Terbinafine        7          0 0000000\n 9      11 Itraconazole       7          4 1111000\n10      12 Terbinafine        7          3 0100110\n11      13 Terbinafine        7          4 1111000\n12      15 Itraconazole       6          2 11000.0\n13      16 Itraconazole       6          1 0000.10\n14      17 Terbinafine        6          4 11110.0\n15      18 Terbinafine        6          1 001.000\n16      19 Itraconazole       7          0 0000000\n17      20 Terbinafine        6          0 000.000\n18      21 Itraconazole       3          2 110....\n19      22 Terbinafine        7          3 1110000\n20      23 Itraconazole       7          0 0000000\n```\n:::\n\n```{.r .cell-code}\n## how many folks have no detachments?\ntable( outcomes$num.detach )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  0   1   2   3   4   5   6   7 \n163  25  25  31  30   8   4   8 \n```\n:::\n\n```{.r .cell-code}\n163 / nrow(outcomes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.554\n```\n:::\n\n```{.r .cell-code}\n## how many always detached?\nsum( outcomes$num.detach == outcomes$num.obs )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16\n```\n:::\n\n```{.r .cell-code}\n16 / nrow(outcomes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.0544\n```\n:::\n:::\n\n\n\n## Further reading\n\nSome further reading on handling missing data.\nBut this is really a course into itself.\n\n-   Gelman & Hill Chapter 25 has a more detailed discussion of missing data imputation.\n\n-   White IR, Royston P, Wood AM. Multiple imputation using chained equations: issues and guidance for practice.\n    Statistics in Medicine 2011;30: 377-399.\n\n-   Graham, JW, Olchowski, AE, Gilreath, TD, 2007.\n    How Many Imputations are Really Needed?\n    Some Practical Clarifications of Multiple Imputation Theory 206--213.\n    https://doi.org/10.1007/s11121-007-0070-9\n\n-   van Buurin S, Groothuis-Oudshoorn K, MICE: Multivariate Imputation by Chained Equations.\n    Journal of Statistical Software.\n    2011;45(3):1-68.\n\n-   Grund S, Lüdtke O, Robitzsch A. Multiple Imputation of Missing Data for Multilevel Models: Simulations and Recommendations.\n    DOI: 10.1177/1094428117703686\n\n## Appendix: More about the mice package\n\nThe mice package gives back a very complex object that has a lot of information about how values were imputed, which values were imputed, and so forth.\nIn the following we unpack the `imp` variable from above a bit more.\n\n**Looking at the imputation object**\n\nIn the following code, we look at the object we get back from `mice()`.\nIt has lots of parts that we can peek into.\n\nFirst, the `imp` list inside of `imp` stores all of our newly imputed data.\nIt is itself a list of each variable with their imputed values:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  imp$imp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Ozone\n      1   2   3   4   5\n5     6  19  14   8  14\n10   12  12   7  23  23\n25   14  19  14  19  14\n26   37  18  32  32  18\n27   11   1  18  13  18\n32   65  45  13  28  29\n33   22  36  12  18  16\n34   13  18   1  13  13\n35   63  35  45  52  71\n36   23  39  20  59  96\n37   24  16  12  34  18\n39   64 135  85  80  91\n42  115  76 115  37  91\n43   66 122  78  64 122\n45   44  28  45  23  16\n46   23  45  46  45  35\n52   20  52  63  47  47\n53   59  59  48 115  37\n54   40  16  35  37  63\n55   40  35  48  39  49\n56   23  39  59  59  16\n57   44  52  40  52  20\n58   30  30  27  14  23\n59   45  32  16  16  46\n60   44  27  34  28  30\n61   89  64  80  37  64\n65   16  16  14  23  29\n72   46  52  65  45  35\n75   35  64  71  18  78\n83   20  40  71  46  59\n84   28  63  37  29  63\n102 115  78  78  37  66\n103  46  29  31  23  40\n107  16  30  13  14  22\n115  41  12  44   7  22\n119  50  78 122  85  50\n150  24  12  27  21  12\n\n$Solar.R\n     1   2   3   4   5\n5    7 313  82  13 314\n6  322 187 222  24 238\n11  66 274 139 135 112\n27  20  24   7 238 193\n96 175 223 284 197 220\n97  51 139 274 237  98\n98  98 203 220 188 276\n\n$Wind\n[1] 1 2 3 4 5\n<0 rows> (or 0-length row.names)\n\n$Temp\n[1] 1 2 3 4 5\n<0 rows> (or 0-length row.names)\n\n$Month\n[1] 1 2 3 4 5\n<0 rows> (or 0-length row.names)\n\n$Day\n[1] 1 2 3 4 5\n<0 rows> (or 0-length row.names)\n```\n:::\n\n```{.r .cell-code}\n  str( imp$imp )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 6\n $ Ozone  :'data.frame':\t37 obs. of  5 variables:\n  ..$ 1: int [1:37] 6 12 14 37 11 65 22 13 63 23 ...\n  ..$ 2: int [1:37] 19 12 19 18 1 45 36 18 35 39 ...\n  ..$ 3: int [1:37] 14 7 14 32 18 13 12 1 45 20 ...\n  ..$ 4: int [1:37] 8 23 19 32 13 28 18 13 52 59 ...\n  ..$ 5: int [1:37] 14 23 14 18 18 29 16 13 71 96 ...\n $ Solar.R:'data.frame':\t7 obs. of  5 variables:\n  ..$ 1: int [1:7] 7 322 66 20 175 51 98\n  ..$ 2: int [1:7] 313 187 274 24 223 139 203\n  ..$ 3: int [1:7] 82 222 139 7 284 274 220\n  ..$ 4: int [1:7] 13 24 135 238 197 237 188\n  ..$ 5: int [1:7] 314 238 112 193 220 98 276\n $ Wind   :'data.frame':\t0 obs. of  5 variables:\n  ..$ 1: logi(0) \n  ..$ 2: logi(0) \n  ..$ 3: logi(0) \n  ..$ 4: logi(0) \n  ..$ 5: logi(0) \n $ Temp   :'data.frame':\t0 obs. of  5 variables:\n  ..$ 1: logi(0) \n  ..$ 2: logi(0) \n  ..$ 3: logi(0) \n  ..$ 4: logi(0) \n  ..$ 5: logi(0) \n $ Month  :'data.frame':\t0 obs. of  5 variables:\n  ..$ 1: logi(0) \n  ..$ 2: logi(0) \n  ..$ 3: logi(0) \n  ..$ 4: logi(0) \n  ..$ 5: logi(0) \n $ Day    :'data.frame':\t0 obs. of  5 variables:\n  ..$ 1: logi(0) \n  ..$ 2: logi(0) \n  ..$ 3: logi(0) \n  ..$ 4: logi(0) \n  ..$ 5: logi(0) \n```\n:::\n\n```{.r .cell-code}\n  str( imp$imp$Ozone )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t37 obs. of  5 variables:\n $ 1: int  6 12 14 37 11 65 22 13 63 23 ...\n $ 2: int  19 12 19 18 1 45 36 18 35 39 ...\n $ 3: int  14 7 14 32 18 13 12 1 45 20 ...\n $ 4: int  8 23 19 32 13 28 18 13 52 59 ...\n $ 5: int  14 23 14 18 18 29 16 13 71 96 ...\n```\n:::\n:::\n\n\n\nWe see that Ozone and Solar.R have imputed values, and the other variables do not.\n\nNext, we see two missing observations in our original data and then see the two imputed values for these two missing observations.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  airqualitysub$Ozone\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 41 36 12 18 NA 28 23 19  8 NA\n```\n:::\n\n```{.r .cell-code}\n  imp$imp$Ozone[,1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]   6  12  14  37  11  65  22  13  63  23  24  64 115  66  44  23  20  59  40\n[20]  40  23  44  30  45  44  89  16  46  35  20  28 115  46  16  41  50  24\n```\n:::\n:::\n\n\n\nWe can make (the hard way) a vector of Ozone by plugging our missing values into the original data.\nBut the `complete()` method, above, is preferred.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  oz = airqualitysub$Ozone\n  oz[ is.na( oz ) ] = imp$imp$Ozone[,1]\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in oz[is.na(oz)] = imp$imp$Ozone[, 1]: number of items to replace is\nnot a multiple of replacement length\n```\n:::\n\n```{.r .cell-code}\n  oz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 41 36 12 18  6 28 23 19  8 12\n```\n:::\n:::\n\n\n\n**What else is there in `imp`?**\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  names(imp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"data\"            \"imp\"             \"m\"               \"where\"          \n [5] \"blocks\"          \"call\"            \"nmis\"            \"method\"         \n [9] \"predictorMatrix\" \"visitSequence\"   \"formulas\"        \"post\"           \n[13] \"blots\"           \"ignore\"          \"seed\"            \"iteration\"      \n[17] \"lastSeedValue\"   \"chainMean\"       \"chainVar\"        \"loggedEvents\"   \n[21] \"version\"         \"date\"           \n```\n:::\n:::\n\n\n\n**What was our imputation method?**\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  imp$method\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Ozone Solar.R    Wind    Temp   Month     Day \n  \"pmm\"   \"pmm\"      \"\"      \"\"      \"\"      \"\" \n```\n:::\n:::\n\n\n\nMean imputation for each variable with missing values.\nLater this will say other thing.\n\n**What was used to impute what?**\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  imp$predictorMatrix\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        Ozone Solar.R Wind Temp Month Day\nOzone       0       1    1    1     1   1\nSolar.R     1       0    1    1     1   1\nWind        1       1    0    1     1   1\nTemp        1       1    1    0     1   1\nMonth       1       1    1    1     0   1\nDay         1       1    1    1     1   0\n```\n:::\n:::\n\n\n\n## Appendix: The amelia package\n\nAmelia is another multiple imputation and missing data package.\nWe do not prefer it, but have some demonstration code in the following, for reference.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  library(Amelia)\n```\n:::\n\n\n\nFor missingness we can make the following:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  missmap(airquality)\n```\n\n::: {.cell-output-display}\n![](intro_missing_data_files/figure-pdf/amelia-1.pdf){fig-align='center' fig-pos='H'}\n:::\n:::\n\n\n\nEach row of the plot is a row of the data, and missing values are shown in brown.\nBut ugly!\nAnd hard to see any trends in the missingness.\n\nYou can use the `Amelia` package to do mean imputation.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  library(dplyr)\n\n## exclude variables that do not vary\n  a.airquality = airquality %>% dplyr::select(-Month)\n\n## impute data\n  a.imp <- amelia(a.airquality, m=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-- Imputation 1 --\n\n  1  2  3  4  5  6\n\n-- Imputation 2 --\n\n  1  2  3  4  5  6\n\n-- Imputation 3 --\n\n  1  2  3  4  5\n\n-- Imputation 4 --\n\n  1  2  3  4  5  6  7\n\n-- Imputation 5 --\n\n  1  2  3  4  5  6\n```\n:::\n\n```{.r .cell-code}\n  a.imp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nAmelia output with 5 imputed datasets.\nReturn code:  1 \nMessage:  Normal EM convergence. \n\nChain Lengths:\n--------------\nImputation 1:  6\nImputation 2:  6\nImputation 3:  5\nImputation 4:  7\nImputation 5:  6\n```\n:::\n:::\n\n\n\nWe can plot our imputed values against our observed values to check that they make sense.\nWe will do this for just one of five datasets we just imputed using `Amelia`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## put imputed values from the third dataset in an object\n  one_imp <- a.imp$imputations[[3]]$Ozone\n\n## make object with observed values \n## from observations without missing Ozone values\n  obs_data <- a.airquality$Ozone \n  \n## make a plot overlaying observed and imputed values\n  hist(one_imp[is.na(obs_data)], prob=TRUE, xlab=\"Ozone\",\n       main=\"Histogram of Imputed Values in 3rd Imputation \\nCompared to Density in Observed Data\",\n       col=\"cyan\", ylim=c(0,0.02))\n  lines(density(obs_data[!is.na(obs_data)]), col=\"darkblue\", lwd=2)\n```\n\n::: {.cell-output-display}\n![](intro_missing_data_files/figure-pdf/unnamed-chunk-56-1.pdf){fig-align='center' fig-pos='H'}\n:::\n:::\n\n\n\nYou can also do multiple imputation in `Amelia`.\nHowever, `Amelia` does not have an easy way to combine the estimates from the imputed datasets (no analogue of `with()` in `mice`).\nYou can write a function that fits your model of interest in each imputed dataset and then use a package like `mitools` to pool the estimates and variances.\n\nMuch easier to use `mice`!\n\n**Aside:** A more important limitation of `Amelia` is that the algorithm it uses to impute missing values assumes multivariate normality, which is often questionable, especially when you have binary variables.\n",
    "supporting": [
      "intro_missing_data_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}