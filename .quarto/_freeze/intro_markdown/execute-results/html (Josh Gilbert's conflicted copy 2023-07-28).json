{
  "hash": "336e2838aee92050e70fab89eb2f92d9",
  "result": {
    "markdown": "---\ntitle: \"Intro to R Markdown\"\nauthor: \"Luke Miratrix\"\neditor: \n  markdown: \n    wrap: sentence\n---\n\n\n<!----- Above this comment (this is what an R Markdown comment looks like) is the header of your document. You can specify a lot of options up there. The most important ones are the title of your document, the author, and the output format. This document outputs to a .pdf. To do this, you need to have LaTeX installed on your computer. You'll want to either install a copy of LaTeX or output your document as an html_document or word_document. You should open this document in R Studio. To compile the document, click on the button that says 'Knit'  ----->\n\n## Overview\n\n[R Markdown](https://bookdown.org/yihui/rmarkdown/) (and its newer cousin [Quarto](https://quarto.org/)) is a simple but powerful markdown language which you can use to create documents with inline R code and results.\nThis makes it much easier for you to complete homework assignments and reports; makes it much less likely that your work will include errors; and makes your work much easier to reproduce.\nFor example, if you find you have to drop cases from your dataset, you can simply add that line of code to your document, and recompile your document.\nAny text that's drawn directly from your analyses will be automatically updated.\n\nOther R packages, such as `Sweave` and `knitr`, allow you to do the same things, but R Markdown has the added advantage of being relatively simple to use.\nThis document will show you how to use R Markdown to create documents which draw directly on your data to produce reports.\n\n## Getting started\n\nEvery R Markdown document starts with a header.\nHeaders look like this:\n\n```         \n---\ntitle: \"My perfect homework\"\nauthor: \"R master\"\noutput: pdf_document\n---\n```\n\nA header can contain more or less information, as you see fit.\nYour computer needs to have a copy of `LaTex` installed in order to output .pdf documents.\nIf you don't, you should change `output: pdf_document` to `output: html_document` or `output: word_document`.\n\nYou identify sections of the document using hashtags; more hashtags indicate less important sections.\n\nFor example, this:\n\n```         \n# A big section\n```\n\nproduces this:\n\n# A big section\n\nwhile this\n\n```         \n## A small section\n```\n\nproduces this:\n\n## A small section\n\nIf your document includes a table of contents, the sections get used to automatically generate the table of contents.\n\nYou can *italicize* words by writing `*italicize*` or `_italicize_`.\nYou can **bold** words with `**bold**` or `__bold__`.\nN.B.\nNewer versions of Markdown and Quarto have a [visual editor](https://rstudio.github.io/visual-markdown-editing/) that allows you to format things in the usual way, e.g., control-B for bold.\nWe generally recommend using the visual editor.\n\nYou can add superscripts (E=mc^2^) by writing `E=mc^2^`.\n\nYou can create unordered lists:\n\n```         \n- Item 1\n- Item 2\n- Item 3\n```\n\nto get\n\n-   Item 1\n-   Item 2\n-   Item 3\n\nOr ordered lists:\n\n```         \n1. Item 1\n2. Item 2\n3. Item 3\n```\n\nto get\n\n1.  Item 1\n2.  Item 2\n3.  Item 3\n\nTo start a new page, just type `\\newpage` (not relevant for HTML output).\n\nAs you may have noticed, one of the driving ideas behind R Markdown is that the text should be interpretable even if it's not compiled.\nA person should be able to read this text file and understand the basic organization and what all of the symbols denote.\n\nYou can also add links and images, and do many other things beyond what we'll show you in this class.\nThere are many resources out there, but [here's](https://rmarkdown.rstudio.com/lesson-1.html) one place you can start.\n\nTo compile or knit the document, click on the button that says `Knit` or `Render`, or Shift + Ctrl/Cmd + K.\n\n## Embedding R code\n\nThere are two main ways to embed R code in R Markdown, code chunks or inline.\n\n### Code chunks\n\nTo insert a code chunk click on `Insert` on the top right corner of your R Markdown file and select `R`.\nOr use keyboard shortcuts: Ctrl + Alt + I for PC and Cmd + Option + I for Mac:\n\n\n::: {.cell}\n\n:::\n\n\nCode chunks have a number of different options.\nThe most important ones for us are:\n\n-   `eval = TRUE`, which means every time you knit the file, the code inside the R code chunk will get evaluated. This is the default.\n-   `echo = TRUE`, which means every time you knit the file, the code inside the R code chunk witll be rendered, and you can see both the code itself and the results from evaluating the code.\n\nFor class, you should keep `echo = TRUE`, so that we can see your code and be able to tell what went wrong, if something did.\nYou can set `echo = FALSE` for code chunks that load and manipulate data.\n\nOther code chunks options you may see in class are:\n\n-   `warning = FALSE`, which means warning messages generated by the code will not be displayed.\n-   `results = 'asis'`, which means results will not be reformatted when the file is compiled (useful if results return raw HTLM).\n-   `fig.height` and `fig.width`, which specify the height and width (in inches) of plots created by the chunk.\n\nLet's try loading some data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven)\ndat <- read_dta(\"data/neighborhood.dta\")\n```\n:::\n\n\nYou can see the code is displayed, and the command is carried out.\nThe file `dat` is loaded in the R environment.\n\nInstead of specifying code chunks options every time, you can specify them globally in the setup chunk by using `knitr::opts_chunk$set(echo = TRUE, eval = TRUE)`.\nYou can then add additional options only to relevant chunks.\nIf you want to exclude specific chunks, you can re-set `echo = FALSE` and `eval = FALSE` for those specific chunks.\n\n**Running code chunks:** A good practice is to run individual code chunks to make sure they are doing what you want them to do.\nYou can do this by executing individual lines of code, or whole chunks.\nGo to `Run` in the upper right corner and select what chunks to execute, e.g.\n`Run Current Chunk`, `Run Next Chunk`, etc.\n\n### Inline code\n\nCode results can also be inserted directly in the text of your R Markdown file.\nThis is particularly useful when you are extracting and interpreting model parameters.\nYou can extract the coefficient from the model and use inline code to report it.\nIf the data or model change, *the text will change too* when you knit the document.\n\nTo add inline code, enclose it in `` `r ` ``.\nFor example, to report the mean reading score, you can use\n\n\n::: {.cell}\n\n```{.r .cell-code}\n`r mean(dat$p7read)`\n```\n:::\n\n\nWhich will produce -0.0443549.\nThat's a few too many decimals, let's round it too using\n\n\n::: {.cell}\n\n```{.r .cell-code}\n`r round(mean(dat$p7read),2)`\n```\n:::\n\n\nwhich produces -0.04\".\n\nHere we used two commands: `round` and `mean`.\nYou can use more commands and write more complex inline code, depending on what you want to report.\n\n## Embedding plots\n\nPlots are easy to embed too.\nFor example,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\ndat$male <- factor(dat$male, levels = c(0, 1), labels = c(\"Female\", \"Male\"))\n  \nggplot(data=dat, aes(p7vrq, attain, colour=male)) + \n  geom_point() + \n  labs(title=\"Attainment as a function of verbal reasoning\",\n       x = \"Verbal reasoning quotient\", \n       y = \"Educational attainment\", colour=\"Gender\") +\n  geom_smooth(method=\"lm\", se=FALSE, colour=\"darkorchid3\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](intro_markdown_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nGirls are rendered as coral, boys are rendered in turquoise, and the line of best fit is drawn in `darkorchid3` (because why not).\nJust because you have a lot of colors and plotting characters to work with doesn't mean you need to use them all.\nIn the options, I specified `fig.width = 7` and `fig.height = 7`.\nNotice that this command draws on `dat`, which we loaded in a previous chunk.\nWhen knitting the document, code chunks get executed in order and the results persist throughout the R Markdown document.\n\nFor the purposes of class, we want to see both your plot code and the plot itself.\nIt's not uncommon to use wrong code to create a plot that looks correct (at least visually).\n\n## Embedding tables\n\nFinally, you can directly render tables in R Markdown.\nThere are many different packages, but in class we'll mostly use `texreg` and `stargazer`.\n(NB the newer function `tab_model` from `sjPlot` is excellent as well!)\n\nYou can use these packages to create a descriptive table.\nFor example:\n\n\n\n```{.r .cell-code}\n# Here I specified results = asis. If I didn't stargazer will just render the table in html\n# I also specified message = FALSE, so that the package citation gets suppressed\nlibrary(stargazer)\nstargazer(dat, type = \"latex\")\n```\n\n\n% Table created by stargazer v.5.2.3 by Marek Hlavac, Social Policy Institute. E-mail: marek.hlavac at gmail.com\n% Date and time: Fri, Jul 28, 2023 - 11:54:07\n\\begin{table}[!htbp] \\centering \n  \\caption{} \n  \\label{} \n\\begin{tabular}{@{\\extracolsep{5pt}}lccccc} \n\\\\[-1.8ex]\\hline \n\\hline \\\\[-1.8ex] \nStatistic & \\multicolumn{1}{c}{N} & \\multicolumn{1}{c}{Mean} & \\multicolumn{1}{c}{St. Dev.} & \\multicolumn{1}{c}{Min} & \\multicolumn{1}{c}{Max} \\\\ \n\\hline \\\\[-1.8ex] \n\\hline \\\\[-1.8ex] \n\\end{tabular} \n\\end{table} \n\n\nWe can also use `texreg` and `stargazer` to create a taxonomy of regression models.\nWe recommend `texreg`, which automatically outputs the variances of random effects (more on this soon).\n\nFor example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(texreg)\n\n# fit some models \nm1 <- lm(attain ~ male, data=dat)\nm2 <- lm(attain ~ male + momed, data=dat)\nm3 <- lm(attain ~ male + momed + daded, data=dat)\n\nscreenreg(list(m1,m2,m3), \n          custom.coef.names=c(\"Intercept\", \"Male\", \"Maternal education\", \"Paternal education\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n=========================================================\n                    Model 1      Model 2      Model 3    \n---------------------------------------------------------\nIntercept              0.15 ***     0.03        -0.02    \n                      (0.03)       (0.03)       (0.03)   \nMale                  -0.12 **     -0.12 **     -0.12 ** \n                      (0.04)       (0.04)       (0.04)   \nMaternal education                  0.49 ***     0.24 ***\n                                   (0.05)       (0.05)   \nPaternal education                               0.54 ***\n                                                (0.06)   \n---------------------------------------------------------\nR^2                    0.00         0.05         0.09    \nAdj. R^2               0.00         0.05         0.08    \nNum. obs.           2310         2310         2310       \n=========================================================\n*** p < 0.001; ** p < 0.01; * p < 0.05\n```\n:::\n:::\n\n\nBoth packages include a lot of options and make it easy to produce publication-quality tables with little effort.\nWe have provided more resources on Canvas and in other portions of this book.\n\n## Embedding mathematical models\n\nWe'll be writing a lot of mathematical models in class.\nR Markdown can use `LaTeX` style math-writing to display mathematical script.\nAnother chapter in the book has more resources with `LaTeX`syntax for the mostly commonly used models in the class.\nSimilar to code chunks and inline code, you can use `LaTeX` for single or multiple equations, or for individual parameters embedded in the text.\n\nFor example, the following statement\n\n```         \n\n$$Y_i = \\beta_0 + \\beta_1 X_i + \\epsilon_i$$\n\n```\n\ncompiles to\n\n\n$$Y_i = \\beta_0 + \\beta_1 Y_i + \\epsilon_i$$\n\n\nAnd the following statement `$\\mu$` compiles to $\\mu$.\nThis will be very helpful when we ask you to match R output to model parameters in homework.\n",
    "supporting": [
      "intro_markdown_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}