{
  "hash": "1f9072c9272960d779edb475c540b332",
  "result": {
    "markdown": "---\ntitle: \"Extracting model information with `broom`\"\nauthor: \"Josh Gilbert\"\neditor: \n  markdown: \n    wrap: sentence\n---\n\n::: {.cell}\n\n:::\n\n\n\nThere are three general ways to get information out of a fit model: print it to the screen and read it, use a variety of methods to pull information out of the model, and use the `broom` package to pull information out of the model into different kinds of data frames (which is in line with *tidy programming*, and the tidyverse).\n\nThis chapter looks at the third way.\nThe following chapter looks at the \"base R\" way.\nWhich to use is a matter of preference.\n\n## Simple Demonstration\n\nOne of my favorite R packages is `broom`, which has many awesome convenience functions for regression models, including MLMs.\n`broom.mixed` is an extension that works with `lmer` models.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load libraries\nlibrary(tidyverse)\nlibrary(broom.mixed)\nlibrary(haven)\nlibrary(knitr)\nlibrary(lme4)\n\n# clear memory\nrm(list = ls())\n\n# load HSB data\nhsb <- read_dta(\"data/hsb.dta\")\n```\n:::\n\n\n\n### `tidy`\n\n`tidy` takes a model object and returns the output as a tidy tibble, which makes it very easy to work with.\nCompare the results below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nols <- lm(mathach ~ ses, hsb)\n\n# ugly!\nsummary(ols)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = mathach ~ ses, data = hsb)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-19.4382  -4.7580   0.2334   5.0649  15.9007 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 12.74740    0.07569  168.42   <2e-16 ***\nses          3.18387    0.09712   32.78   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.416 on 7183 degrees of freedom\nMultiple R-squared:  0.1301,\tAdjusted R-squared:   0.13 \nF-statistic:  1075 on 1 and 7183 DF,  p-value: < 2.2e-16\n```\n:::\n\n```{.r .cell-code}\n# beautiful!\ntidy(ols)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 5\n  term        estimate std.error statistic   p.value\n  <chr>          <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept)    12.7     0.0757     168.  0        \n2 ses             3.18    0.0971      32.8 8.71e-220\n```\n:::\n\n```{.r .cell-code}\n# even better\nols |> tidy() |> kable(digits = 2)\n```\n\n::: {.cell-output-display}\n|term        | estimate| std.error| statistic| p.value|\n|:-----------|--------:|---------:|---------:|-------:|\n|(Intercept) |    12.75|      0.08|    168.42|       0|\n|ses         |     3.18|      0.10|     32.78|       0|\n:::\n\n```{.r .cell-code}\n# works great for MLMs\nmlm <- lmer(mathach ~ ses + mnses + (ses|schoolid), hsb)\n\ntidy(mlm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 x 6\n  effect   group    term                 estimate std.error statistic\n  <chr>    <chr>    <chr>                   <dbl>     <dbl>     <dbl>\n1 fixed    <NA>     (Intercept)            12.7       0.151     84.2 \n2 fixed    <NA>     ses                     2.19      0.122     18.0 \n3 fixed    <NA>     mnses                   3.78      0.383      9.88\n4 ran_pars schoolid sd__(Intercept)         1.64     NA         NA   \n5 ran_pars schoolid cor__(Intercept).ses   -0.212    NA         NA   \n6 ran_pars schoolid sd__ses                 0.673    NA         NA   \n7 ran_pars Residual sd__Observation         6.07     NA         NA   \n```\n:::\n:::\n\n\n\n### `glance`\n\nWhat about model fit stats?\nThat's where `glance` comes in:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglance(ols)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 12\n  r.squared adj.r.squared sigma statistic   p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>     <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.130         0.130  6.42     1075. 8.71e-220     1 -23549. 47104. 47125.\n# i 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n```\n:::\n\n```{.r .cell-code}\nglance(mlm) |> \n  kable(digits = 2)\n```\n\n::: {.cell-output-display}\n| nobs| sigma|    logLik|      AIC|      BIC| REMLcrit| df.residual|\n|----:|-----:|---------:|--------:|--------:|--------:|-----------:|\n| 7185|  6.07| -23280.71| 46575.42| 46623.58| 46561.42|        7178|\n:::\n:::\n\n\n\n### `augment`\n\nWhat about residuals?\n`augment` to the rescue:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmlm |> \n  ranef() |> \n  augment() |> \n  head() |> \n  kable(digits = 2)\n```\n\n::: {.cell-output-display}\n|grp      |variable    |level | estimate|    qq| std.error|    lb|    ub|\n|:--------|:-----------|:-----|--------:|-----:|---------:|-----:|-----:|\n|schoolid |(Intercept) |8367  |    -4.14| -0.18|      0.78| -5.43| -2.85|\n|schoolid |(Intercept) |4523  |    -3.09|  0.02|      0.98| -4.70| -1.47|\n|schoolid |(Intercept) |6990  |    -2.98| -1.46|      0.78| -4.26| -1.70|\n|schoolid |(Intercept) |3705  |    -2.81|  0.28|      1.09| -4.61| -1.02|\n|schoolid |(Intercept) |8854  |    -2.57| -0.85|      0.80| -3.89| -1.25|\n|schoolid |(Intercept) |9397  |    -2.43| -0.65|      0.92| -3.94| -0.92|\n:::\n:::\n\n\n\n## Extracting `lmer` model info\n\n### Obtaining Fixed Effects\n\n`lmer` models are reduced form, so fixed effects include both L1 and L2 predictors.\n`tidy` denotes the type of effect in a column called `effect`, where `fixed` means fixed, and `ran_pars` means random (standing for \"random parameters\")\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmlm |> \n  tidy() |> \n  filter(effect == \"fixed\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 6\n  effect group term        estimate std.error statistic\n  <chr>  <chr> <chr>          <dbl>     <dbl>     <dbl>\n1 fixed  <NA>  (Intercept)    12.7      0.151     84.2 \n2 fixed  <NA>  ses             2.19     0.122     18.0 \n3 fixed  <NA>  mnses           3.78     0.383      9.88\n```\n:::\n:::\n\n\n\nWe can use the `[[]]` notation or a pipeline to extract elements from the data frame:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# within effect of SES\ntidy(mlm)[[2,4]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.190349\n```\n:::\n\n```{.r .cell-code}\n# contextual effect of SES\ntidy(mlm)[[3,4]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.781243\n```\n:::\n\n```{.r .cell-code}\n# using the variable names in a pipeline\nmlm |> \n  tidy() |> \n  filter(term == \"ses\") |> \n  pull(estimate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.190349\n```\n:::\n:::\n\n\n\n### Obtaining Random Effects\n\n`tidy` includes the random effects (SDs and correlations) right there in the output.\nFor example, `sd__ses` is the SD of the SES slope.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# display all random effects\nmlm |> \n  tidy() |> \n  filter(effect == \"ran_pars\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 6\n  effect   group    term                 estimate std.error statistic\n  <chr>    <chr>    <chr>                   <dbl>     <dbl>     <dbl>\n1 ran_pars schoolid sd__(Intercept)         1.64         NA        NA\n2 ran_pars schoolid cor__(Intercept).ses   -0.212        NA        NA\n3 ran_pars schoolid sd__ses                 0.673        NA        NA\n4 ran_pars Residual sd__Observation         6.07         NA        NA\n```\n:::\n\n```{.r .cell-code}\n# pull single number\nmlm |> \n  tidy() |> \n  filter(term == \"sd__ses\") |> \n  pull(estimate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6730818\n```\n:::\n:::\n\n\n\n### Obtaining Empirical Bayes Estimates of the Random Effects\n\nThis is best done in a pipeline.\nWe first apply `ranef`, then `augment` and get the EB estimates in the `estimate` column, along with the `std.error`, confidence bounds, and `qq` statistics.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmlm |> \n  ranef() |> \n  augment() |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       grp    variable level  estimate         qq std.error        lb\n1 schoolid (Intercept)  8367 -4.137656 -0.1811498 0.7845770 -5.428170\n2 schoolid (Intercept)  4523 -3.089835  0.0235018 0.9819306 -4.704967\n3 schoolid (Intercept)  6990 -2.981315 -1.4619679 0.7779876 -4.260991\n4 schoolid (Intercept)  3705 -2.811935  0.2776904 1.0911916 -4.606785\n5 schoolid (Intercept)  8854 -2.569302 -0.8528365 0.8045804 -3.892719\n6 schoolid (Intercept)  9397 -2.431031 -0.6452734 0.9163587 -3.938307\n          ub\n1 -2.8471413\n2 -1.4747032\n3 -1.7016394\n4 -1.0170840\n5 -1.2458846\n6 -0.9237553\n```\n:::\n:::\n\n\n\n### Intercept-Slope Correlation\n\nThe BLUPs are in long form.\nWe can reshape to wide if we want to, for example, visualize the correlation between the random intercepts and slopes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblups <- mlm |> \n  ranef() |> \n  augment() |> \n  select(variable, level, estimate) |> \n  pivot_wider(names_from = variable, values_from = estimate,\n              id_cols = level) |> \n  rename(schoolid = 1, random_intercept = 2, random_slope = 3)\n\nhead(blups)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  schoolid random_intercept random_slope\n  <fct>               <dbl>        <dbl>\n1 8367                -4.14       0.159 \n2 4523                -3.09       0.272 \n3 6990                -2.98      -0.0353\n4 3705                -2.81      -0.0968\n5 8854                -2.57       0.377 \n6 9397                -2.43       0.174 \n```\n:::\n\n```{.r .cell-code}\nggplot(blups, aes(x = random_intercept, y = random_slope)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](broom_files/figure-pdf/unnamed-chunk-10-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Caterpillar Plots\n\nThe included information makes it easy to construct caterpillar plots!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nri <- mlm |> \n  ranef() |> \n  augment() |> \n  filter(variable == \"(Intercept)\")\n\nggplot(ri, aes(x = level, y = estimate,\n               ymin = lb,\n               ymax = ub)) +\n  geom_point() +\n  geom_errorbar() +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](broom_files/figure-pdf/unnamed-chunk-11-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Fitted Values\n\nUsing `augment` directly on the `lmer` object gives us fitted values (`.fitted`) and residuals (`.resid`).\nWe can use this for residual plots or for plotting lines for each school.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmlm |> \n  augment() |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 15\n  mathach     ses  mnses schoolid .fitted .resid   .hat   .cooksd .fixed   .mu\n    <dbl>   <dbl>  <dbl>    <dbl>   <dbl>  <dbl>  <dbl>     <dbl>  <dbl> <dbl>\n1    5.88 -1.53   -0.434     1224    7.29 -1.41  0.0325 0.000629    7.68  7.29\n2   19.7  -0.588  -0.434     1224    9.43 10.3   0.0177 0.0175      9.74  9.43\n3   20.3  -0.528  -0.434     1224    9.57 10.8   0.0173 0.0188      9.87  9.57\n4    8.78 -0.668  -0.434     1224    9.25 -0.468 0.0183 0.0000376   9.57  9.25\n5   17.9  -0.158  -0.434     1224   10.4   7.49  0.0164 0.00863    10.7  10.4 \n6    4.58  0.0220 -0.434     1224   10.8  -6.24  0.0170 0.00619    11.1  10.8 \n# i 5 more variables: .offset <dbl>, .sqrtXwt <dbl>, .sqrtrwt <dbl>,\n#   .weights <dbl>, .wtres <dbl>\n```\n:::\n\n```{.r .cell-code}\n# fitted lines\nmlm |> \n  augment() |> \n  ggplot(aes(x = ses, y = .fitted, group = schoolid)) +\n  geom_line( alpha=0.5 )\n```\n\n::: {.cell-output-display}\n![](broom_files/figure-pdf/unnamed-chunk-12-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# residuals\nmlm |> \n  augment() |> \n  ggplot(aes(y = .resid, x = .fitted)) +\n  geom_hline(yintercept = 0, color = \"red\") +\n  geom_point(alpha = 0.2)\n```\n\n::: {.cell-output-display}\n![](broom_files/figure-pdf/unnamed-chunk-12-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Additional Resources\n\nI've recently discovered the packaged `mixedup` that has some excellent convenience functions for extracting info from `lmer` models: <https://m-clark.github.io/mixedup/index.html>\n",
    "supporting": [
      "broom_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}