{
  "hash": "1ad6ff257480eef51657f8759298e986",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Intro to `ggplot`\"\nauthor: \"Luke Miratrix\"\neditor: \n  markdown: \n    wrap: sentence\n---\n\n\n\n\n\n\n\n\nThis chapter demonstrates some powerful features of `ggplot2`, the plotting package that we use most in this course.\n\n`ggplot` can initially seem like a nightmare to some, but once you wrestle it to the ground it is one of the most powerful visualization tools you might have in your toolbox.\nHappily, it is fairly easy to get some basics up and running once you start looking at the world the way it does.\nLet's start doing that.\n\nFirst, `ggplot` thinks of a plot as a collection of layers stacked on top of each other.\nThe way this looks in code is a bunch of weird function calls connected together with `+`.\nYou read this series of calls left to right.\nThe first call is always a statement saying what data you are plotting and what variables you care about.\nSo before you can even plot, you need to make sure your data are in a nice, tidy data frame.\n\nHappily, when you load data, it usually is.\nFor example:\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat <- read_dta(\"data/hsb.dta\")\nhead( dat )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 26\n  minority female     ses mathach  size sector pracad disclim himinty schoolid\n     <dbl>  <dbl>   <dbl>   <dbl> <dbl>  <dbl>  <dbl>   <dbl>   <dbl>    <dbl>\n1        0      1 -1.53      5.88   842      0  0.350    1.60       0     1224\n2        0      1 -0.588    19.7    842      0  0.350    1.60       0     1224\n3        0      0 -0.528    20.3    842      0  0.350    1.60       0     1224\n4        0      0 -0.668     8.78   842      0  0.350    1.60       0     1224\n5        0      0 -0.158    17.9    842      0  0.350    1.60       0     1224\n6        0      0  0.0220    4.58   842      0  0.350    1.60       0     1224\n# ℹ 16 more variables: mean <dbl>, sd <dbl>, sdalt <dbl>, junk <dbl>,\n#   sdalt2 <dbl>, num <dbl>, se <dbl>, sealt <dbl>, sealt2 <dbl>, t2 <dbl>,\n#   t2alt <dbl>, pickone <dbl>, mmses <dbl>, mnses <dbl>, xb <dbl>, resid <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThe easiest full plot to make has two elements.\nThe first gives what your variables are, and the second says how to plot them:\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(dat, aes(y = mathach, x = ses)) + \n  geom_point( cex=0.5)\n```\n\n::: {.cell-output-display}\n![](intro_ggplot_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=75%}\n:::\n:::\n\n\n\n\n\n\nSo far, nothing too scary, right?\nThe `ggplot( dat, aes(x=mathach, y=ses) )` says \"My plot is going to use `dat` for my data, and my $y$-axis is the `mathach` variable and my $x$-axis is `ses`.\" The `aes()` bit is \"aesthetics\"--it is a way of tying variables to different kinds of things you could have on your plot: x location, y location, color, plotting symbol, and a few other things.\n\nFor example:\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat <- dat |> \n  mutate(sector = factor(sector, levels=c(0,1), labels=c(\"public\",\"catholic\")),\n         minority = factor(minority, labels=c(\"non-minority\",\"minority\")))\n\nggplot( dat, aes(y=mathach, x=ses, col=sector, pch=minority) ) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](intro_ggplot_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=75%}\n:::\n:::\n\n\n\n\n\n\nNote that `ggplot` wants the data frame to be neatly put together, including that categorical variables are listed as factors.\nThis is why we convert the dummy `sector` to a factor above.\nOnce you do this, however, it will label things in a nice way.\n\n## Summarizing\n\nYou can also automatically add various statistical summaries, such as simple regression lines:\n\n\n\n\n\n\n::: {.cell layout-align=\"center\" messages='false'}\n\n```{.r .cell-code}\nggplot( dat, aes(y=mathach, x=ses, col=sector ) ) + \n    geom_point() + \n    stat_smooth( method=\"lm\", se = FALSE )\n```\n\n::: {.cell-output-display}\n![](intro_ggplot_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=75%}\n:::\n:::\n\n\n\n\n\n\nNotice how it automatically realized you have two subgroups of data defined by sector.\nIt gives you a regression line for each group.\n\nThe elements of the plot are stacked, and if you remove one of the elements, it will not appear:\n\n\n\n\n\n\n::: {.cell layout-align=\"center\" messages='false'}\n\n```{.r .cell-code}\nggplot( dat, aes(y=mathach, x=ses, col=sector ) ) + \n  stat_smooth( method=\"lm\" )\n```\n\n::: {.cell-output-display}\n![](intro_ggplot_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=75%}\n:::\n:::\n\n\n\n\n\n\nHere we also added some uncertainty bars around the regression lines by not saying `se = FALSE`.\n(Including uncertainty is the default; this uncertainty is not to be trusted, especially in this course, as it is not taking clustering into account.)\n\n## Grouping\n\nCombining these ideas we can make a trend line for each school:\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy.plot = ggplot( dat, aes(y=mathach, x=ses, col=sector, group=schoolid ) ) + \n    stat_smooth( method=\"lm\", alpha=0.5, se = FALSE )\n\nmy.plot\n```\n\n::: {.cell-output-display}\n![](intro_ggplot_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=75%}\n:::\n:::\n\n\n\n\n\n\nThe trendlines automatically extend to the limits of the data they are run on, hence the different lengths.\n\nAlso, notice we \"saved\" the plot in the variable `my.plot`.\nOnly when we \"print\" the plot will the plot appear on your display.\nWhen we type the name of a variable, it prints.\nOnce you have a plot stored in a variable you can augment it very easily.\n\nAs you may now realize, `ggplot2` is very, very powerful.\n\n## Customization\n\nWe next show some other things you can do.\nFor example, you can make lots of little plots:\n\n\n\n\n\n\n::: {.cell layout-align=\"center\" messages='false'}\n\n```{.r .cell-code}\nmy.plot + \n  facet_grid( ~ female ) + \n    ggtitle(\"School-level trend lines for their male and female students\") +\n    labs(x=\"SES\",y=\"Math Achievement\") \n```\n\n::: {.cell-output-display}\n![](intro_ggplot_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=75%}\n:::\n:::\n\n\n\n\n\n\nOr,\n\n\n\n\n\n\n::: {.cell layout-align=\"center\" messages='false'}\n\n```{.r .cell-code}\n# random subset of schoolid\nsch <- sample( unique( dat$schoolid ), 6 )\n\n# pipe into ggplot \nsch.six <- dat |> \n  filter(schoolid %in% sch)\n\nmy.six.plot <- ggplot( sch.six, aes(y=mathach, x=ses, col=sector ) ) + \n    facet_wrap( ~ schoolid, ncol=3 ) + \n    geom_point() + stat_smooth( method=\"lm\" )\n\nmy.six.plot\n```\n\n::: {.cell-output-display}\n![](intro_ggplot_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=75%}\n:::\n:::\n\n\n\n\n\n\nAlso shown in the above are adding titles.\n\n## Themes\n\nYou can very quickly change the entire presentation of your plot using `themes`.\nThere are pre-packaged ones, and you can make your own that you use over and over.\nHere we set up a theme to be used moving forward\n\n\n\n\n\n\n::: {.cell layout-align=\"center\" messages='false'}\n\n```{.r .cell-code}\nlibrary( ggthemes )\nmy_t = theme_calc() + theme( legend.position=\"bottom\", \n                             legend.direction=\"horizontal\", \n                             legend.key.width=unit(1,\"cm\")  )\ntheme_set( my_t )\n```\n:::\n\n\n\n\n\n\nCompare the same plot from above, now with a new theme.\n\n\n\n\n\n\n::: {.cell layout-align=\"center\" messages='false'}\n\n```{.r .cell-code}\nmy.six.plot\n```\n\n::: {.cell-output-display}\n![](intro_ggplot_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=75%}\n:::\n:::\n\n\n\n\n\n\nCool, no?\n\n## Next steps\n\nThere is a lot of information out there on `ggplot` and my best advice is to find code examples, and then modify them as needed.\nThere are tutorials and blogs that walk through building plots (search for \"ggplot tutorial\" for example), but seeing examples seems to be the best way to learn the stuff.\nFor example, you could use the above code for your project one quite readily.\nAnd don't be afraid to ask how to modify plots on Piazza!\n\nIn particular, check out the excellent [\"R for Data Science'' textbook](http://r4ds.had.co.nz). It extensively uses ggplot, starting [here](http://r4ds.had.co.nz/data-visualisation.html).\n",
    "supporting": [
      "intro_ggplot_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}