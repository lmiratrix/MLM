{
  "hash": "c16654aa21d562b6cd015664c4af6936",
  "result": {
    "markdown": "---\ntitle: \"Tips, Tricks, and Debugging in R\"\nauthor: \"Luke Miratrix\"\neditor: \n  markdown: \n    wrap: sentence\n---\n\n\n\n\n\nThis chapter is a complete hodge-podge of  section covers ways of dealing with data, especially messy data you might have for final projects.\n\n## Some miscellaneous advice\n\nSo you are starting to learn R.\nBut there's lots of good tricks you'll never know about until somebody shows you.\nClean code is one such good trick; consider the following: \"Your most important collaborator is you from 6 months ago. Unfortunately, you can't ask that-you any questions, because they don't answer their email.\"\n\nIn this section we give a few things that you may find useful, either now or later.\n\n### A few random tips\n\nThe letter \"l\" looks like the number \"1\"---watch out for that.\nThings like \"mylm\" are usually all letters, with \"lm\" standing for linear model.\n\n### Quick tips regarding R Markdown report generation\n\nDon't put \"View()\" in your Markdown file when loading your csv file.\nJust put in the `read_csv` line.\nOtherwise you will not be able to knit.\n\nIf you can't knit PDFs you need to install latex (tex).\nOnce you do, reboot your computer.\nIf things don't work, then knit to Microsoft word (or, failing that, html as a last resort), print to pdf, and turn that in.\nBut then ask a teaching fellow to help get things set up, since PDFs make for much more readable reports.\n\n### Saving R objects\n\nIf you have the result of something that took awhile to run (e.g., a big multilevel model fit to a lot of data) you can try saving it like so:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmyBigThing = lm(mpg ~ disp, data=mtcars) #something slow\nsaveRDS(myBigThing, savedPath)\n\n## Later on:\nmyBigThing <- readRDS(savedPath)\n```\n:::\n\n\n### R style (based on Google style guide)\n\nTry to do the following\n\n-   Comment your code!\n-   Structure of an R file:\n    -   Descriptive comments (including date)\n    -   Load libraries\n    -   Constants and script parameters (# iterations, etc.)\n    -   Functions (with descriptive comment after first line)\n    -   Everything else\n-   variableName / variable.name, FunctionVerb, kConstantName. not_like_this\n-   Curly Braces, line breaks: see previous slide\n-   Consistency: 2-space indents, `y = (a * x) + b + rnorm(1, sd=sigma)`\n-   Avoid `attach()`\n\n### set.seed\n\nIf your code uses random numbers, then you should set your seed, which makes your script always generate the same sequence of random numbers.\n\nFor example, say your code had this:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntryCatch({(1:(1:10)[rpois(1, 3)])}, error=function(e){(e)}) #works?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nset.seed(97)\ntryCatch({(1:(1:10)[rpois(1, 3)])}, error=function(e){(e)}) #fails!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<simpleError in 1:(1:10)[rpois(1, 3)]: argument of length 0>\n```\n:::\n:::\n\n\n(Note the `tryCatch()` method is a way of generating errors and not crashing.)\n\nKey thing to know: **Reproducible results help with debugging.**\n\nIf you want to get fancy, try this (after installing the \\`TeachingDemos' package):\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nTeachingDemos::char2seed(\"quinn\") # Using your name as a seed says \"nothing up my sleeve\"\n```\n:::\n\n\n## File structure: how not to do it\n\nEver seen this?\n\n-   /My Documents\n    -   my paper.tex\n    -   my paper draft 2.tex\n    -   my paper final.tex\n    -   my paper final revised.tex\n    -   my paper final revised 2.tex\n    -   script.r\n    -   script 2.r\n    -   data.csv\n\nTry instead something like:\n\n-   /stat 166-Small Data Analysis\n    -   stat 166.rproj\n    -   /Empty Project\n        -   /code\n        -   /data\n        -   /text\n        -   /figures\n        -   readme.txt\n    -   /HW1\n        -   ...\n\nYour `readme.txt` might have informational notes such as \"Got data from bit.ly/XYZ.\" to remind you of what you were up to.\n\nYour `figures` folder should be full of figures you can easily regenerate with code in your `code` folder.\n\n\n\n\n### Making Data Frames\n\nFor small datasets, you can type in data the hard way like so:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nexp.dat = data.frame( ID=c(\"a\",\"b\",\"c\",\"d\"), \n      cond = c(\"AI\",\"DI\",\"DI\",\"AI\"),\n\t\t\ttrial1 = c(\"E\",\"U\",\"U\",\"E\"),\n\t\t\tdec1 = c(1,1,0,1),\n\t\t\ttrial2 = c(\"U\",\"E\",\"U\",\"E\"),\n\t\t\tdec2 = c(0,0,0,1),\n\t\t\t\ttrial3 = c(\"U\",\"E\",\"E\",\"U\"),\n\t\t\tdec3 = c(0,1,0,1),\n\t\t\t\ttrial4 = c(\"E\",\"U\",\"E\",\"U\"),\n\t\t\tdec4 = c(0,1,0,0) )\nexp.dat  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ID cond trial1 dec1 trial2 dec2 trial3 dec3 trial4 dec4\n1  a   AI      E    1      U    0      U    0      E    0\n2  b   DI      U    1      E    0      E    1      U    1\n3  c   DI      U    0      U    0      E    0      E    0\n4  d   AI      E    1      E    1      U    1      U    0\n```\n:::\n:::\n\n\nThis is for an experiment on 4 subjects.\nThe first and forth subject got the AI treatment, the second two got the DI treatment.\nThe subjects then had 4 trials each, and they received a \"E\" choice or a \"U\" choice, and the decision variable is whether they accepted the choice.\n\nAs you can see, data can get a bit complicated!\n\n### Making sure your data are numeric\n\nSometimes when you load data in, R does weird things like decide all your numbers are actually words.\nThis happens if some of your entries are not numbers.\nThen R makes them all not numbers.\nYou can check this with the `str()` function:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstr( exp.dat )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t4 obs. of  10 variables:\n $ ID    : chr  \"a\" \"b\" \"c\" \"d\"\n $ cond  : chr  \"AI\" \"DI\" \"DI\" \"AI\"\n $ trial1: chr  \"E\" \"U\" \"U\" \"E\"\n $ dec1  : num  1 1 0 1\n $ trial2: chr  \"U\" \"E\" \"U\" \"E\"\n $ dec2  : num  0 0 0 1\n $ trial3: chr  \"U\" \"E\" \"E\" \"U\"\n $ dec3  : num  0 1 0 1\n $ trial4: chr  \"E\" \"U\" \"E\" \"U\"\n $ dec4  : num  0 1 0 0\n```\n:::\n:::\n\n\nHere we see that we have factors (categorical variables) and numbers (num).\nAll is well.\n\nIf something should be a number, then change it like so:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlst <-  c( 1, 2, 3, \"dog\", 5, 6 )\nstr( lst )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:6] \"1\" \"2\" \"3\" \"dog\" \"5\" \"6\"\n```\n:::\n\n```{.r .cell-code}\nlst <- as.numeric( lst )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion\n```\n:::\n\n```{.r .cell-code}\nlst\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  2  3 NA  5  6\n```\n:::\n\n```{.r .cell-code}\nstr( lst )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:6] 1 2 3 NA 5 6\n```\n:::\n:::\n\n\nNote it warned you that you had non-numbers when you converted.\nThe non-numbers are now missing (NA).\n\nFor a dataframe, you fix like this:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nexp.dat$trial1 = as.numeric( exp.dat$trial1 )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion\n```\n:::\n:::\n\n\n### Merging Data\n\nOften you have two datasets that you want to merge.\nFor example, say you want to merge some data you have on a few states with some SAT information from the mosaic package.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary( mosaicData )\ndata( SAT )\nhead( SAT )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       state expend ratio salary frac verbal math  sat\n1    Alabama   4.41  17.2   31.1    8    491  538 1029\n2     Alaska   8.96  17.6   48.0   47    445  489  934\n3    Arizona   4.78  19.3   32.2   27    448  496  944\n4   Arkansas   4.46  17.1   28.9    6    482  523 1005\n5 California   4.99  24.0   41.1   45    417  485  902\n6   Colorado   5.44  18.4   34.6   29    462  518  980\n```\n:::\n\n```{.r .cell-code}\ndf = data.frame( state=c(\"Alabama\",\"California\",\"Fakus\"), \n                A=c(10,20,50), \n                frac=c(0.5, 0.3, 0.4) )\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       state  A frac\n1    Alabama 10  0.5\n2 California 20  0.3\n3      Fakus 50  0.4\n```\n:::\n\n```{.r .cell-code}\nmerge( df, SAT, by=\"state\", all.x=TRUE )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       state  A frac.x expend ratio salary frac.y verbal math  sat\n1    Alabama 10    0.5   4.41  17.2   31.1      8    491  538 1029\n2 California 20    0.3   4.99  24.0   41.1     45    417  485  902\n3      Fakus 50    0.4     NA    NA     NA     NA     NA   NA   NA\n```\n:::\n:::\n\n\nThe records are combined by the \"by\" variable.\nI.e., each record in df is matched with each record in SAT with the same value of \"state.\"\n\nThings to note: If you have the same variable in each dataframe, it will keep both, and add a suffix of \".x\" and \".y\" to indicate where they came from.\n\nThe \"all.x\" means keep all records from your first dataframe (here df) even if there is no match.\nIf you added \"all.y=TRUE\" then you would get all 50 states from the SAT dataframe even though df doesn't have most of them.\nTry it!\n\nYou can merge on more than one variable.\nI.e., if you said \\verb\\|by=c(\"A\",\"B\")\\| then it would match records if they had the same value for both A and B.\nSee below for an example on this.\n\n### Lagged Data\n\nSometimes you have multiple times for your units (think country or state), and you want to regress, say, future X on current X.\nThen you want to have both future and current X for each case.\n\nHere think of a case as a Country at a point in time.\nE.g., we might have data like this:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndtw = read.csv( \"data/fake_country_block.csv\", as.is=TRUE )\ndt = pivot_longer( dtw, cols=X1997:X2004,\n                   names_to = \"Year\", names_prefix = \"X\",\n                   values_to = \"X\" )\ndt$Year = as.numeric( dt$Year )\nslice_sample( dt, n=5 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  Country  Year     X\n  <chr>   <dbl> <dbl>\n1 China    2000   3.4\n2 England  1999  53  \n3 China    2003   6  \n4 Morocco  1997  31.9\n5 England  2003  57.3\n```\n:::\n:::\n\n\nWe then want to know what the X will be 2 years in the future.\nWe can do this with the following trick:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndt.fut = dt\ndt.fut$Year = dt.fut$Year - 2\nhead(dt.fut)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  Country  Year     X\n  <chr>   <dbl> <dbl>\n1 China    1995   0.5\n2 China    1996   1  \n3 China    1997   2  \n4 China    1998   3.4\n5 China    1999   4  \n6 China    2000   5.3\n```\n:::\n\n```{.r .cell-code}\nnewdt = left_join( dt, dt.fut, \n                   by=c(\"Country\",\"Year\"), suffix=c(\"\",\".fut\") )\nhead( newdt, 10 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 4\n   Country  Year     X X.fut\n   <chr>   <dbl> <dbl> <dbl>\n 1 China    1997   0.5   2  \n 2 China    1998   1     3.4\n 3 China    1999   2     4  \n 4 China    2000   3.4   5.3\n 5 China    2001   4     6  \n 6 China    2002   5.3   7  \n 7 China    2003   6    NA  \n 8 China    2004   7    NA  \n 9 Morocco  1997  31.9  33  \n10 Morocco  1998  32    34  \n```\n:::\n:::\n\n\nHere we are merging records that match \\emph{both} Country and Year.\n\nNote that for the final two China entries, we don't have a future X value.\nThe merge will make it NA indicating it is missing.\n\nHow this works: we are tricking the program.\nWe are making a new \\verb\\|dt.lag\\| data.frame and then putting all the entries into the past by two years.\nWhen we merge, and match on Country and Year, the current dataframe and the lagged dataframe get lined up by this shift.\nClever, no?\n\nNow we could do regression:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy.lm = lm( X.fut ~ X + Country, data=newdt )\nsummary( my.lm )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = X.fut ~ X + Country, data = newdt)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-0.5869 -0.2610  0.0107  0.2753  0.5137 \n\nCoefficients:\n               Estimate Std. Error t value Pr(>|t|)    \n(Intercept)      1.8684     0.2128    8.78  2.7e-06 ***\nX                1.0179     0.0582   17.48  2.3e-09 ***\nCountryEngland  -0.8259     2.9704   -0.28     0.79    \nCountryMorocco  -0.7514     1.7603   -0.43     0.68    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.351 on 11 degrees of freedom\n  (9 observations deleted due to missingness)\nMultiple R-squared:     1,\tAdjusted R-squared:     1 \nF-statistic: 2.13e+04 on 3 and 11 DF,  p-value: <2e-16\n```\n:::\n:::\n\n\n<!--\nFor organized data, where you know the years are in ascending order with no skips, you can also use the `lead()` and `lag()` methods:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndt <- dt %>%\n  arrange( Country, Year ) %>%\n  group_by( Country ) %>%\n  mutate( X.fut = dplyr::lead( X, 2 ) )\nprint( dt, n = 11 )\n```\n:::\n\n-->\n\n### Summarizing Data\n\nSometimes you want to collapse several cases into one.\nThis is called aggregating.\nIf you install a package called \"dplyr\" (Run `install.packages( \"dplyr\" )` once to install, or better yet simply install `tidyverse`) then you will have great power.\n\nUsing `newdt` from above, we can summarize countries across all their time points:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnewdt %>% group_by( Country ) %>% \n    summarise( mean.X = mean(X, na.rm=TRUE ),\n        sd.X = sd( X, na.rm=TRUE ) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  Country mean.X  sd.X\n  <chr>    <dbl> <dbl>\n1 China     3.65  2.37\n2 England  54.6   2.43\n3 Morocco  34.0   2.12\n```\n:::\n:::\n\n\n<!--Here is an example from the experimental dat file, above.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnd = rs %>% group_by( ID, trial) %>%\n    summarize( n=n(),\n               accept=sum(dec) )\nnd$reject = nd$n - nd$accept\nhead(nd)\n```\n:::\n\n-->\n\nYou can also augment data.\nHere we subtract the mean from each group:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndshift = newdt %>% group_by( Country ) %>%\n    mutate( Xm = mean(X, na.rm=TRUE),\n            Xc = X - mean(X, na.rm=TRUE ) )\nhead(dshift)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n# Groups:   Country [1]\n  Country  Year     X X.fut    Xm    Xc\n  <chr>   <dbl> <dbl> <dbl> <dbl> <dbl>\n1 China    1997   0.5   2    3.65 -3.15\n2 China    1998   1     3.4  3.65 -2.65\n3 China    1999   2     4    3.65 -1.65\n4 China    2000   3.4   5.3  3.65 -0.25\n5 China    2001   4     6    3.65  0.35\n6 China    2002   5.3   7    3.65  1.65\n```\n:::\n:::\n\n\n## Troubleshooting in R\n\nBy now you have gotten to the point where you can get some **really weird** errors in R and they can be quite, quite frustrating.\nThis section talks about how to think about fixing them on your own.\nIt also covers some common mistakes that can happen.\nSay you have some code that does a bootstrap and prints out a histogram.\nNothing seems to work and the `hist` command is giving a strange error.\n\nFirst step\n\n\n```{=tex}\n\\bgroup \\vspace{5mm}\n \\noindent\\rule{1ex}{1ex}%\n      \\hspace{\\stretch{1}}\\textbf{Put all your code in an R Script!}\\hspace{\\stretch{1}}%\n      \\rule{1ex}{1ex}\n      \\vspace{5mm}\n\\egroup\n```\n\nPut all the commands, start to finish, in your script.\nThe reason for this step is then you know what you are looking at.\nWhen scrolling to old commands and trying different things, you can get very tangled up.\nAnyway, say you do, and you are still getting a strange error:\n\n\n```{=tex}\n\\begin{verbatim}\n> lovemale = rep(c(0,1,2), c(372, 807,34))\n> loveboot = replicate(1000, {\n+     lovesampmale = sample(lovemale, 1000, replace=TRUE)\n+     propsampmale = table(lovesampmale)[0]/length(lovesampmale)\n+     mean(propsampmale)\n+ })\n> hist(loveboot, breaks=20)\n\nError in hist.default(loveboot, breaks = 20) : character(0)\nIn addition: Warning messages:\n1: In min(x) : no non-missing arguments to min; returning Inf\n2: In max(x) : no non-missing arguments to max; returning -Inf\n\\end{verbatim}\n```\n\nYou might think `hist` is the culprit, but that might not be true.\n\n\\\nFirst step is to check if you have any strange arguments to hist.\nTry running hist without any arguments other than the data.\n\n\n```{=tex}\n\\bgroup \\vspace{5mm}\n \\noindent\\rule{1ex}{1ex}%\n      \\hspace{\\stretch{1}}\\textbf{ Always simplify when things aren't working! }\\hspace{\\stretch{1}}%\n      \\rule{1ex}{1ex}\n      \\vspace{5mm}\n\\egroup\n```\n\nIf that doesn't work (and here it won't), then the next step is to see what is going on is to look at what you are making a histogram out of!\n\n\n::: {.cell layout-align=\"center\" hidden='true'}\n::: {.cell-output .cell-output-stdout}\n```\n[1] NaN NaN NaN NaN NaN NaN\n```\n:::\n:::\n\n\nYou can also look at `loveboot` by clicking on it in your 'Workspace' to see if it is weird.\nIf it has a bunch of `NA` or `NaN` then you need to fix your bootstrap code.\nYou are trying to make a histogram out of bad data.\nAnother rule:\n\n\n```{=tex}\n\\bgroup \\vspace{5mm}\n \\noindent\\rule{1ex}{1ex}%\n      \\hspace{\\stretch{1}}\\textbf{Always look at your data and variables!}\\hspace{\\stretch{1}}%\n      \\rule{1ex}{1ex}\n      \\vspace{5mm}\n\\egroup\n```\n\nThose bad data came from somewhere!\nLet's examine what is happening inside your bootstrap.\\\nThe easiest way is to run the stuff **inside** your replicate to get one replicate and see what is going on.\nThis illustrates a very important debugging rule:\n\n\n```{=tex}\n\\bgroup \\vspace{5mm}\n \\noindent\\rule{1ex}{1ex}%\n      \\hspace{\\stretch{1}}\\textbf{Break your code down and check each piece.}\\hspace{\\stretch{1}}%\n      \\rule{1ex}{1ex}\n      \\vspace{5mm}\n\\egroup\n```\n\nThe code inside your `replicate` should run by itself.\nSo try it, looking at the value each time\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  lovesampmale = sample(lovemale, 1000, replace=TRUE)\n  head(lovesampmale)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 1 1 0 1 0\n```\n:::\n\n```{.r .cell-code}\n  propsampmale = table(lovesampmale)[0]/length(lovesampmale)\n  propsampmale\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnamed numeric(0)\n```\n:::\n\n```{.r .cell-code}\n  mean(propsampmale)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NaN\n```\n:::\n:::\n\n\nWe see that the `propsampmale` line is going wonky.\nWe unpack the pieces\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntable(lovesampmale)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlovesampmale\n  0   1   2 \n294 680  26 \n```\n:::\n\n```{.r .cell-code}\nlength(lovesampmale)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1000\n```\n:::\n\n```{.r .cell-code}\ntable(lovesampmale)[0]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnamed integer(0)\n```\n:::\n:::\n\n\nWe finally find the error.\nWe need quotation marks around the 0.\nWithout the quotes, R interprets \"\\[0\\]\" as taking the 0th entry of the table, which doesn't exist, rather than the entry **named** \"0,\" which does[^r_tips-1]\n\n[^r_tips-1]: Why?\n    Because for a table those things at the top are **names** and all names are considered words.\n    We denote words in R with quotation marks\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntable(lovesampmale)[\"0\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  0 \n294 \n```\n:::\n:::\n\n\n### Aside: the table technique\n\nThe \"table technique\" to calculate the proportion of some list of data that has a given value is dangerous.\nIn particular if that value isn't present, then the table could drop it, causing some real trouble.\nInstead use\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmean(propsampmale == 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NaN\n```\n:::\n:::\n\n\n### Code redundancies\n\nSometimes you don't need parts of your code at all!\nThe propsampmale has the answer.\nNo need for the final mean in the above code!\n\n### Categories should be words\n\nFor categories, don't use numbers.\nInstead use\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlovemale = rep(c(\"Little\", \"Some\", \"Lots\"), c(372, 807,34))\n```\n:::\n\n\nand then your mean line will be\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlovemale = rep(c(\"Little\", \"Some\", \"Lots\"), c(372, 807,34))\n```\n:::\n\n\ngiving your final fixed code (plot not shown):\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlovemale = rep(c(\"Little\", \"Some\", \"Lots\"), c(372, 807,34))\nloveboot = replicate(1000, {\n  lovesampmale = sample( lovemale, replace=TRUE )\n  mean(lovesampmale == \"Little\")\n})\nhist(loveboot)\n```\n\n::: {.cell-output-display}\n![](r_tips_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=70%}\n:::\n:::\n",
    "supporting": [
      "r_tips_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}