{
  "hash": "c943805ac004c6a1ce809170f8b58208",
  "result": {
    "markdown": "# Tips, Tricks, and Debugging in R\n\n\n\n\n\n\n\nThis chapter is a complete hodge-podge of small things that tend to bite students, especially when they are dealing with messy data that they might have for final projects.\n\nIn particular, as you learn R, there's lots of good tricks you'll never know about until somebody shows you. Clean code is one such good trick; consider the following: \"Your most important collaborator is you from 6 months ago. Unfortunately, you can't ask that-you any questions, because they don't answer their email.\"\n\nSo onwards with a few things that you may find useful, either now or later.\n\n## Some principles to live by\n\n### Watch Tricky letter and number confusion in code\n\nThe letter \"l\" looks like the number \"1\"---watch out for that. Things like \"mylm\" are usually all letters, with \"lm\" standing for linear model.\n\n### Write in a good R style\n\nTry to do the following\n\n-   Comment your code!\n-   Structure your R file like so:\n    -   Descriptive comments (including date)\n    -   Load libraries\n    -   Constants and script parameters (# iterations, etc.)\n    -   Functions (with descriptive comment after first line)\n    -   Everything else\n-   Naming: variableName / variable.name, FunctionVerb, kConstantName. not_like_this\n-   Indentation: 2-space indents is nice\n-   Spaces are ok, but don't go overboard.  E.g., `y = (a * x) + b + rnorm(1, sd=sigma)`\n-   Never use `attach()`\n\n\n### Save and load R objects to save time\n\nIf you have the result of something that took awhile to run (e.g., a big multilevel model fit to a lot of data) you can try saving it like so:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmyBigThing = lm(mpg ~ disp, data=mtcars) #something slow\nsaveRDS(myBigThing, savedPath)\n\n## Later on:\nmyBigThing <- readRDS(savedPath)\n```\n:::\n\n\n\n### Reproduce randomness with `set.seed`\n\nIf your code uses random numbers, then you should set your seed, which makes your script always generate the same sequence of random numbers.\n\nFor example, say your code had this:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntryCatch({(1:(1:10)[rpois(1, 3)])}, error=function(e){(e)}) #works?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nset.seed(97)\ntryCatch({(1:(1:10)[rpois(1, 3)])}, error=function(e){(e)}) #fails!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<simpleError in 1:(1:10)[rpois(1, 3)]: argument of length 0>\n```\n:::\n:::\n\n\n\n(Note the `tryCatch()` method is a way of generating errors and not crashing.)\n\nKey thing to know: **Reproducible results help with debugging.**\n\nIf you want to get fancy, try this (after installing the \\`TeachingDemos' package):\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nTeachingDemos::char2seed(\"quinn\") \n# Using your name as a seed says \"nothing up my sleeve\"\n```\n:::\n\n\n\n### Keep your files organized\n\nEver seen this?\n\n-   /My Documents\n    -   my paper.tex\n    -   my paper draft 2.tex\n    -   my paper final.tex\n    -   my paper final revised.tex\n    -   my paper final revised 2.tex\n    -   script.r\n    -   script 2.r\n    -   data.csv\n\nTry instead something like:\n\n-   /stat 166-Small Data Analysis\n    -   stat 166.rproj\n    -   /Empty Project\n        -   /code\n        -   /data\n        -   /text\n        -   /figures\n        -   readme.txt\n    -   /HW1\n        -   ...\n\nYour `readme.txt` might have informational notes such as \"Got data from bit.ly/XYZ.\" to remind you of what you were up to.\n\nYour `figures` folder should be full of figures you can easily regenerate with code in your `code` folder.\n\n### Make sure your data are numeric\n\nSometimes when you load data in, R does weird things like decide all your numbers are actually words. This happens if some of your entries are not numbers. Then R makes them all not numbers. You can check this with the `str()` function:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstr( exp.dat )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t4 obs. of  10 variables:\n $ ID    : chr  \"a\" \"b\" \"c\" \"d\"\n $ cond  : chr  \"AI\" \"DI\" \"DI\" \"AI\"\n $ trial1: chr  \"E\" \"U\" \"U\" \"E\"\n $ dec1  : num  1 1 0 1\n $ trial2: chr  \"U\" \"E\" \"U\" \"E\"\n $ dec2  : num  0 0 0 1\n $ trial3: chr  \"U\" \"E\" \"E\" \"U\"\n $ dec3  : num  0 1 0 1\n $ trial4: chr  \"E\" \"U\" \"E\" \"U\"\n $ dec4  : num  0 1 0 0\n```\n:::\n:::\n\n\n\nHere we see that we have factors (categorical variables) and numbers (num). All is well.\n\nIf something should be a number, then change it like so:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlst <-  c( 1, 2, 3, \"dog\", 5, 6 )\nstr( lst )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:6] \"1\" \"2\" \"3\" \"dog\" \"5\" \"6\"\n```\n:::\n\n```{.r .cell-code}\nlst <- as.numeric( lst )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion\n```\n:::\n\n```{.r .cell-code}\nlst\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  2  3 NA  5  6\n```\n:::\n\n```{.r .cell-code}\nstr( lst )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:6] 1 2 3 NA 5 6\n```\n:::\n:::\n\n\n\nNote it warned you that you had non-numbers when you converted. The non-numbers are now missing (NA).\n\nFor a dataframe, you fix like this:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nexp.dat$trial1 = as.numeric( exp.dat$trial1 )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion\n```\n:::\n:::\n\n\n\n\n### Categories should be words\n\nFor categorical variables, don't use numbers, if at all possible.  E.g.,\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlevels = c( \"Low\", \"Middle\", \"High\", NA )\n```\n:::\n\n\nis better than\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlevels = c(1, 2, 3, 99 )\n```\n:::\n\n\n\n\n## Data Wrangling\n\nWe next give some high level data wrangling advice. But really, check out R for DS for much more and much better on the merging and summarizing topics.\n\n### Handling Lagged Data\n\nSometimes you have multiple times for your units (think country or state), and you want to regress, say, future X on current X. Then you want to have both future and current X for each case.\n\nHere think of a case as a Country at a point in time. E.g., we might have data like this:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndtw = read.csv( \"data/fake_country_block.csv\", as.is=TRUE )\ndt = pivot_longer( dtw, cols=X1997:X2004,\n                   names_to = \"Year\", names_prefix = \"X\",\n                   values_to = \"X\" )\ndt$Year = as.numeric( dt$Year )\nslice_sample( dt, n=5 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 3\n  Country  Year     X\n  <chr>   <dbl> <dbl>\n1 China    2000   3.4\n2 England  1999  53  \n3 China    2003   6  \n4 Morocco  1997  31.9\n5 England  2003  57.3\n```\n:::\n:::\n\n\n\nWe then want to know what the X will be 2 years in the future. We can do this with the following trick:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndt.fut = dt\ndt.fut$Year = dt.fut$Year - 2\nhead(dt.fut)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  Country  Year     X\n  <chr>   <dbl> <dbl>\n1 China    1995   0.5\n2 China    1996   1  \n3 China    1997   2  \n4 China    1998   3.4\n5 China    1999   4  \n6 China    2000   5.3\n```\n:::\n\n```{.r .cell-code}\nnewdt = left_join( dt, dt.fut, \n                   by=c(\"Country\",\"Year\"), suffix=c(\"\",\".fut\") )\nhead( newdt, 10 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 x 4\n   Country  Year     X X.fut\n   <chr>   <dbl> <dbl> <dbl>\n 1 China    1997   0.5   2  \n 2 China    1998   1     3.4\n 3 China    1999   2     4  \n 4 China    2000   3.4   5.3\n 5 China    2001   4     6  \n 6 China    2002   5.3   7  \n 7 China    2003   6    NA  \n 8 China    2004   7    NA  \n 9 Morocco  1997  31.9  33  \n10 Morocco  1998  32    34  \n```\n:::\n:::\n\n\n\nHere we are merging records that match \\emph{both} Country and Year.\n\nNote that for the final two China entries, we don't have a future X value. The merge will make it NA indicating it is missing.\n\nHow this works: we are tricking the program. We are making a new \\\\verb\\|dt.lag\\| data.frame and then putting all the entries into the past by two years. When we merge, and match on Country and Year, the current dataframe and the lagged dataframe get lined up by this shift. Clever, no?\n\nNow we could do regression:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy.lm = lm( X.fut ~ X + Country, data=newdt )\nsummary( my.lm )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = X.fut ~ X + Country, data = newdt)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-0.5869 -0.2610  0.0107  0.2753  0.5137 \n\nCoefficients:\n               Estimate Std. Error t value Pr(>|t|)    \n(Intercept)      1.8684     0.2128    8.78  2.7e-06 ***\nX                1.0179     0.0582   17.48  2.3e-09 ***\nCountryEngland  -0.8259     2.9704   -0.28     0.79    \nCountryMorocco  -0.7514     1.7603   -0.43     0.68    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.351 on 11 degrees of freedom\n  (9 observations deleted due to missingness)\nMultiple R-squared:     1,\tAdjusted R-squared:     1 \nF-statistic: 2.13e+04 on 3 and 11 DF,  p-value: <2e-16\n```\n:::\n:::\n\n\n\n<!--\n\n\n````{=html}\nFor organized data, where you know the years are in ascending order with no skips, you can also use the `lead()` and `lag()` methods:\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndt <- dt %>%\n  arrange( Country, Year ) %>%\n  group_by( Country ) %>%\n  mutate( X.fut = dplyr::lead( X, 2 ) )\nprint( dt, n = 11 )\n```\n:::\n\n\n````\n-->\n\n\n### Quick overview of merging data\n\nOften you have two datasets that you want to merge. For example, say you want to merge some data you have on a few states with some SAT information from the mosaic package.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary( mosaicData )\ndata( SAT )\nhead( SAT )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       state expend ratio salary frac verbal math  sat\n1    Alabama   4.41  17.2   31.1    8    491  538 1029\n2     Alaska   8.96  17.6   48.0   47    445  489  934\n3    Arizona   4.78  19.3   32.2   27    448  496  944\n4   Arkansas   4.46  17.1   28.9    6    482  523 1005\n5 California   4.99  24.0   41.1   45    417  485  902\n6   Colorado   5.44  18.4   34.6   29    462  518  980\n```\n:::\n\n```{.r .cell-code}\ndf = data.frame( state=c(\"Alabama\",\"California\",\"Fakus\"), \n                A=c(10,20,50), \n                frac=c(0.5, 0.3, 0.4) )\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       state  A frac\n1    Alabama 10  0.5\n2 California 20  0.3\n3      Fakus 50  0.4\n```\n:::\n\n```{.r .cell-code}\nmerge( df, SAT, by=\"state\", all.x=TRUE )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       state  A frac.x expend ratio salary frac.y verbal math  sat\n1    Alabama 10    0.5   4.41  17.2   31.1      8    491  538 1029\n2 California 20    0.3   4.99  24.0   41.1     45    417  485  902\n3      Fakus 50    0.4     NA    NA     NA     NA     NA   NA   NA\n```\n:::\n:::\n\nThe records are combined by the \"by\" variable. I.e., each record in df is matched with each record in SAT with the same value of \"state.\"\n\nThings to note: If you have the same variable in each dataframe, it will keep both, and add a suffix of \".x\" and \".y\" to indicate where they came from.\n\nThe \"all.x\" means keep all records from your first dataframe (here df) even if there is no match. If you added \"all.y=TRUE\" then you would get all 50 states from the SAT dataframe even though df doesn't have most of them. Try it!\n\nYou can merge on more than one variable. I.e., if you said \\\\verb\\|by=c(\"A\",\"B\")\\| then it would match records if they had the same value for both A and B. See below for an example on this.\n\n### Summarizing/aggregating Data\n\nSometimes you want to collapse several cases into one. This is called aggregating. If you install a package called \"dplyr\" (Run `install.packages( \"dplyr\" )` once to install, or better yet simply install `tidyverse`) then you will have great power.\n\nUsing `newdt` from above, we can summarize countries across all their time points:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnewdt %>% group_by( Country ) %>% \n    summarise( mean.X = mean(X, na.rm=TRUE ),\n        sd.X = sd( X, na.rm=TRUE ) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n  Country mean.X  sd.X\n  <chr>    <dbl> <dbl>\n1 China     3.65  2.37\n2 England  54.6   2.43\n3 Morocco  34.0   2.12\n```\n:::\n:::\n\nYou can also augment data by adding new variables. You can even do this within groups.\nHere we subtract the mean from each group:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndshift = newdt %>% group_by( Country ) %>%\n    mutate( Xm = mean(X, na.rm=TRUE),\n            Xc = X - mean(X, na.rm=TRUE ) )\nhead(dshift)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 6\n# Groups:   Country [1]\n  Country  Year     X X.fut    Xm    Xc\n  <chr>   <dbl> <dbl> <dbl> <dbl> <dbl>\n1 China    1997   0.5   2    3.65 -3.15\n2 China    1998   1     3.4  3.65 -2.65\n3 China    1999   2     4    3.65 -1.65\n4 China    2000   3.4   5.3  3.65 -0.25\n5 China    2001   4     6    3.65  0.35\n6 China    2002   5.3   7    3.65  1.65\n```\n:::\n:::\n\n\n\n### Making Data Frames on the fly\n\nFor small datasets, you can type in data the hard way like so:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nexp.dat = data.frame( ID=c(\"a\",\"b\",\"c\",\"d\"), \n      cond = c(\"AI\",\"DI\",\"DI\",\"AI\"),\n\t\t\ttrial1 = c(\"E\",\"U\",\"U\",\"E\"),\n\t\t\tdec1 = c(1,1,0,1),\n\t\t\ttrial2 = c(\"U\",\"E\",\"U\",\"E\"),\n\t\t\tdec2 = c(0,0,0,1),\n\t\t\t\ttrial3 = c(\"U\",\"E\",\"E\",\"U\"),\n\t\t\tdec3 = c(0,1,0,1),\n\t\t\t\ttrial4 = c(\"E\",\"U\",\"E\",\"U\"),\n\t\t\tdec4 = c(0,1,0,0) )\nexp.dat  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ID cond trial1 dec1 trial2 dec2 trial3 dec3 trial4 dec4\n1  a   AI      E    1      U    0      U    0      E    0\n2  b   DI      U    1      E    0      E    1      U    1\n3  c   DI      U    0      U    0      E    0      E    0\n4  d   AI      E    1      E    1      U    1      U    0\n```\n:::\n:::\n\nThis is for an experiment on 4 subjects. The first and forth subject got the AI treatment, the second two got the DI treatment. The subjects then had 4 trials each, and they received a \"E\" choice or a \"U\" choice, and the decision variable is whether they accepted the choice.\n\nAs you can see, data can get a bit complicated!\n\n",
    "supporting": [
      "r_tips_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}