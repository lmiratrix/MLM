{
  "hash": "4d02b3592f572ee3302514861596d572",
  "result": {
    "markdown": "---\ntitle: \"`pivot_longer` and `pivot_wider`\"\nauthor: \"Luke Miratrix and Josh Gilbert\"\neditor: \n  markdown: \n    wrap: sentence\n---\n\n::: {.cell}\n\n:::\n\n\n\n`pivot_longer` and `pivot_wider` from `tidyverse` are great functions to understand.\nFirst, we load `tidyverse` and make some fake data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndat <- data.frame( ID = c( 1:3 ), \n                  X = c( 10, 20, 30 ),\n                  Y1 = 1:3,\n                  Y2 = 10 + 1:3,\n                  Y3 = 20 + 1:3 )\n\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ID  X Y1 Y2 Y3\n1  1 10  1 11 21\n2  2 20  2 12 22\n3  3 30  3 13 23\n```\n:::\n:::\n\n\n\nWe use `pivot_longer` to take our `Y` values (imagine these as three measurements) and nest them within each `ID` for longitudinal MLM analysis. (NB you can use SEM to fit longitudinal models with wide data; we do not explore the application here.)\n\n`pivot_wider` takes us back in the other direction.\n\nWe then verify our work with a few checks.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatL <- pivot_longer(dat, Y1:Y3, \n                     names_to = \"time\", \n                     values_to = \"front\" )\n\ndatL\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 x 4\n     ID     X time  front\n  <int> <dbl> <chr> <dbl>\n1     1    10 Y1        1\n2     1    10 Y2       11\n3     1    10 Y3       21\n4     2    20 Y1        2\n5     2    20 Y2       12\n6     2    20 Y3       22\n7     3    30 Y1        3\n8     3    30 Y2       13\n9     3    30 Y3       23\n```\n:::\n\n```{.r .cell-code}\nnewdat <- pivot_wider( datL, c(ID, X), \n                       names_from=time, \n                       values_from=front  )\n\nnewdat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 5\n     ID     X    Y1    Y2    Y3\n  <int> <dbl> <dbl> <dbl> <dbl>\n1     1    10     1    11    21\n2     2    20     2    12    22\n3     3    30     3    13    23\n```\n:::\n\n```{.r .cell-code}\nstopifnot( length( unique( newdat$ID ) ) == nrow( newdat ) )\n\n\ndatL\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 x 4\n     ID     X time  front\n  <int> <dbl> <chr> <dbl>\n1     1    10 Y1        1\n2     1    10 Y2       11\n3     1    10 Y3       21\n4     2    20 Y1        2\n5     2    20 Y2       12\n6     2    20 Y3       22\n7     3    30 Y1        3\n8     3    30 Y2       13\n9     3    30 Y3       23\n```\n:::\n\n```{.r .cell-code}\nstudents = datL %>% dplyr::select( ID, X ) %>%\n    unique()\n\nstudents\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n     ID     X\n  <int> <dbl>\n1     1    10\n2     2    20\n3     3    30\n```\n:::\n\n```{.r .cell-code}\nstudents = merge( students, newdat, by=\"ID\" )\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}