{
  "hash": "b7ed622c88c3dc278617eaa20b839002",
  "result": {
    "markdown": "# Making tables in Markdown {#sec-make-tables}\n\n\n\n\n\nYou might want to make tables. Usually you should probably make charts instead, but every so often a table is a nice thing to have. This chapter is about making generic tables. For regression tables, see @sec-make-regression-tables.\n\nTo illustrate, I make some fake data\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary( tidyverse )\ndat = tibble( G = sample( LETTERS[1:5], 100, replace=TRUE ),\n              X = rnorm( 100 ),\n              rp = sample( letters[1:3], 100, replace=TRUE ),\n              Z = sample( c(\"tx\",\"co\"), 100, replace=TRUE ),\n              Y = rnorm( 100 ) )\n```\n:::\n\n\nWe can make summery of it by our grouping variable:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsdat <- dat %>% group_by( G) %>%\n    summarise( EY = mean( Y ),\n               pT = mean( Z == \"tx\" ),\n               sdY = sd( Y ) )\n```\n:::\n\n\nOur intermediate results:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsdat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  G         EY    pT   sdY\n  <chr>  <dbl> <dbl> <dbl>\n1 A     -0.247 0.667 1.03 \n2 B      0.636 0.455 1.18 \n3 C      0.248 0.462 0.645\n4 D      0.161 0.625 1.02 \n5 E     -0.218 0.654 1.18 \n```\n:::\n:::\n\n\nSay our grouping variable is a set of codes for something more special. We can merge in better names by first making a small \"cross-walk\" of the ID codes to the full names, and then merging them to our results:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnames = tribble( ~ G, ~ name,\n                 \"A\", \"fred\",\n                 \"B\", \"doug\",\n                 \"C\", \"xiao\",\n                 \"D\", \"lily\",\n                 \"E\", \"unknown\" )\nnames\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  G     name   \n  <chr> <chr>  \n1 A     fred   \n2 B     doug   \n3 C     xiao   \n4 D     lily   \n5 E     unknown\n```\n:::\n\n```{.r .cell-code}\nsdat = left_join( sdat, names ) %>%\n    relocate( name)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(G)`\n```\n:::\n:::\n\n\nFinally, the easiest way to make a table is with the `kable` command.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::kable( sdat, digits=2 )\n```\n\n::: {.cell-output-display}\n|name    |G  |    EY|   pT|  sdY|\n|:-------|:--|-----:|----:|----:|\n|fred    |A  | -0.25| 0.67| 1.03|\n|doug    |B  |  0.64| 0.45| 1.18|\n|xiao    |C  |  0.25| 0.46| 0.64|\n|lily    |D  |  0.16| 0.62| 1.02|\n|unknown |E  | -0.22| 0.65| 1.18|\n:::\n:::\n\n\nThis is a great workhorse table-making tool! There are expansion R packages as well, e.g. `kableExtra`, which can do lots of fancy customizable stuff.\n\n## Making a \"table one\"\n\nThe \"table one\" is the first table in a lot of papers that show general means of different variables for different groups. The `tableone` package is useful:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tableone)\n\n# sample mean  \nCreateTableOne(data = dat,\n               vars = c(\"G\", \"Z\", \"X\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               \n                Overall      \n  n               100        \n  G (%)                      \n     A             15 (15.0) \n     B             22 (22.0) \n     C             13 (13.0) \n     D             24 (24.0) \n     E             26 (26.0) \n  Z = tx (%)       58 (58.0) \n  X (mean (SD)) -0.11 (1.04) \n```\n:::\n\n```{.r .cell-code}\n# you can also stratify by a variables of interest\ntb <- CreateTableOne(data = dat,\n                     vars = c(\"X\", \"G\", \"Y\"), \n                     strata = c(\"Z\"))\ntb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               Stratified by Z\n                co            tx            p      test\n  n                42            58                    \n  X (mean (SD)) -0.16 (1.11)  -0.08 (1.00)   0.709     \n  G (%)                                      0.491     \n     A              5 (11.9)     10 (17.2)             \n     B             12 (28.6)     10 (17.2)             \n     C              7 (16.7)      6 (10.3)             \n     D              9 (21.4)     15 (25.9)             \n     E              9 (21.4)     17 (29.3)             \n  Y (mean (SD))  0.26 (1.07)   0.01 (1.12)   0.258     \n```\n:::\n:::\n\n\nYou can then use `kable` as so:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprint(tb$ContTable, printToggle = FALSE) %>%\n    knitr::kable()\n```\n\n::: {.cell-output-display}\n|              |co           |tx           |p     |test |\n|:-------------|:------------|:------------|:-----|:----|\n|n             |42           |58           |      |     |\n|X (mean (SD)) |-0.16 (1.11) |-0.08 (1.00) |0.709 |     |\n|Y (mean (SD)) |0.26 (1.07)  |0.01 (1.12)  |0.258 |     |\n:::\n:::\n\n\n## Table of summary stats\n\nYou can also easily make pretty tables using the `stargazer` package. You need to ensure the data is a data.frame, not tibble, because `stargazer` is old school. It appears to only do continuous variables.\n\nFinally, you need to modify the R code chunk so it looks like this:\n\n\n::: {.cell layout-align=\"center\" messages='false'}\n\n:::\n\n\nso the output of stargazer gets formatted properly in your R Markdown.\n\n\n::: {.cell layout-align=\"center\" messages='false'}\n\n```{.r .cell-code}\nlibrary(stargazer)\n\nstargazer(as.data.frame(dat))\n```\n\n\n% Table created by stargazer v.5.2.3 by Marek Hlavac, Social Policy Institute. E-mail: marek.hlavac at gmail.com\n% Date and time: Mon, Sep 11, 2023 - 11:06:56\n\\begin{table}[!htbp] \\centering \n  \\caption{} \n  \\label{} \n\\begin{tabular}{@{\\extracolsep{5pt}}lccccc} \n\\\\[-1.8ex]\\hline \n\\hline \\\\[-1.8ex] \nStatistic & \\multicolumn{1}{c}{N} & \\multicolumn{1}{c}{Mean} & \\multicolumn{1}{c}{St. Dev.} & \\multicolumn{1}{c}{Min} & \\multicolumn{1}{c}{Max} \\\\ \n\\hline \\\\[-1.8ex] \nX & 100 & $-$0.110 & 1.044 & $-$2.418 & 2.377 \\\\ \nY & 100 & 0.117 & 1.099 & $-$3.145 & 2.629 \\\\ \n\\hline \\\\[-1.8ex] \n\\end{tabular} \n\\end{table} \n:::\n\n\nYou can include only some of the variables and omit stats that are not of interest:\n\n\n::: {.cell layout-align=\"center\" messages='false'}\n\n```{.r .cell-code}\n# to include only variables of interest\nstargazer(as.data.frame(dat), header=FALSE, \n          omit.summary.stat = c(\"p25\", \"p75\", \"min\", \"max\"), # to omit percentiles\n          title = \"Table 1: Descriptive statistics\")\n```\n\n\n\\begin{table}[!htbp] \\centering \n  \\caption{Table 1: Descriptive statistics} \n  \\label{} \n\\begin{tabular}{@{\\extracolsep{5pt}}lccc} \n\\\\[-1.8ex]\\hline \n\\hline \\\\[-1.8ex] \nStatistic & \\multicolumn{1}{c}{N} & \\multicolumn{1}{c}{Mean} & \\multicolumn{1}{c}{St. Dev.} \\\\ \n\\hline \\\\[-1.8ex] \nX & 100 & $-$0.110 & 1.044 \\\\ \nY & 100 & 0.117 & 1.099 \\\\ \n\\hline \\\\[-1.8ex] \n\\end{tabular} \n\\end{table} \n:::\n\n\nSee the `stargazer` help file for how to set/change more of the options: https://cran.r-project.org/web/packages/stargazer/stargazer.pdf\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}