{"title":"Optimization Algorithms for MLMs","markdown":{"yaml":{"title":"Optimization Algorithms for MLMs","author":"Luke Miratrix","editor":{"markdown":{"wrap":"sentence"}}},"headingText":"Convergence and optimization algorithms","containsRefs":false,"markdown":"\n\n\nUnlike OLS, which has a simple closed-form solution for parameter estimates, multi-level models are complex and often do not have closed-form solutions.[^lmer_optimization-1]\nAs a result, programming languages use optimization algorithms to fit models.\nThese optimization algorithms are typically iterative processes that repeatedly test potential values and eventually converge to the model estimates.\n\n[^lmer_optimization-1]: \"Closed form\" means that there is a formula you can use to simply and directly calculate your estimates.\n    For example, in OLS your matrix equation for $\\hat{\\beta} = (X'X)^{-1}X'Y$\n\nTypically, optimization algorithms involve approximating the log-likelihood function as a multivariate quadratic function.\nSometimes this approximation is easy to find and closely matches the true log-likelihood; in these cases, convergence occurs quickly.\nHowever, we've seen that convergence is trickier when the log-likelihood function is flat near the maximum; it's also trickier with more complex and fragile likelihoods, like those created by the link functions from Generalized Least Squares (GLS) models.\n\n## What to do when your model won't converge\n\nIf your error won't converge, you might get a warning message like this:\n\nWarning message: In checkConv(attr(opt, \"derivs\"), opt$par, ctrl = control$checkConv, : Model failed to converge with max\\|grad\\| = 0.0463355 (tol = 0.001, component 1)\n\nThis warning message tells us two things.\nFirst, remember that we are trying to find the maximum of the likelihood function, or the place where the `slope = 0`.\nIn the warning, the `tol = 0.001` tells us that R will be happy if it finds estimates where the `slope` $\\leq$ `0.001`.\nIt's also saying that our slope when R stopped converging was `0.0463355`.\n\nSteps that you can take to resolve:\n\n```{=tex}\n\\begin{enumerate}\n  \\item Try rescaling variables and refitting your model\n  \\item Try changing your optimizer settings\n\\end{enumerate}\n```\nTo address items #2 and #3, you add a `Control` option into your `lme`, `lmer`, or `glmer` function.\nEach of those functions has its own option, but they all take the same arguments:\n\n```{=tex}\n\\begin{enumerate}\n  \\item lme: lmeControl()\n  \\item lmer: lmerControl()\n  \\item glmer: glmerControl()\n\\end{enumerate}\n```\nBelow are some other optimizer options that you can try.\nFor simplicitly, we're specifying them all as \"glmer\" options, but you could easily adjust them to match whichever model you are trying (but failing) to fit:\n\n```{r, eval = FALSE, }\n## Use a Nelder-Mead optimizer\nlog_mod <- glmer(pass ~ (gender + frl_new + f3) + \n                   (gender + frl_new + f3|sch), \n                 data = wide_dat, family = binomial(),\n                 control = glmerControl(optimizer = 'Nelder_Mead'))\n\n## Use a BFGS optimizer \nlog_mod <- glmer(pass ~ (gender + frl_new + f3) + \n                   (gender + frl_new + f3|sch), \n                 data = wide_dat, family = binomial(),\n                 control = glmerControl(optimizer=\"optim\", optimMethod = \"BFGS\"))\n\n#If these aren't working, you can downlaod a special package to use the optimx optimizer\n#install.packages(‘optimx’)\nlibrary(optimx)\nlog_mod <- glmer(pass ~ (gender + frl_new + f3) + \n                   (gender + frl_new + f3|sch), \n                 data = wide_dat, family = binomial(),\n                 glmerControl(optimizer = 'optimx', calc.derivs = FALSE,\n                              optCtrl = list(method = \"L-BFGS-B\", \n                                             starttests = FALSE, \n                                             kkt = FALSE)))\n```\n\nAside from these examples, there are many other ways to adjust your optimization commands, which can be found here: https://rdrr.io/cran/lme4/man/lmerControl.html\n\n## Technical Appendix: Understanding the Types of Optimization Algorithms\n\nThere are generally four \"types\" of algorithms employed to find MLE/REML solutions:\n\n```{=tex}\n\\begin{enumerate}\n\\item Newton methods \n\\item Quasi-Newton methods\n\\item EM algorithm \n\\item Other\n\\end{enumerate}\n```\n## Newton Methods\n\nNewton's method is the most \"pure\" of these approaches; essentially Newton's method uses a Taylor series approximation to approximate a quadratic function and find its maxima.\nIt involves finding the Hessian (a matrix containing all the second and partial derivatives from your likelihood).\nAn advantage of this approach is that it is theoretically the best of the three named approaches because it will often require fewer iterations to converge.\nHowever, there are two drawbacks:\n\n```{=tex}\n\\begin{enumerate}\n\\item When there are a large number of parameters, it is time-consuming to analytically calculate or numerically approximate all second order and mixed derivatives needed for the Hessian matrix.\n\\item In regions where the log-likelihood function is not sufficiently concave down, there is a tendency to dramatically overshoot because the step size to the next point is proportional to the inverse of the second derivative, resulting in pathological oscillations that would amplify if allowed to continue. Thus, where the log-likelihood function is not well approximated by a second order Taylor expansion, the method tends to fail miserably. This would be the case, for example, if the log-likelihood function was a standard normal density and you started out 2 SD from the mean.\n\\end{enumerate}\n```\n## Quasi-Newton Methods\n\nQuasi-Newton methods start with a \"guess\" for the Hessian, apply the quadratic formula to attain a new point, update the guess of the Hessian, and repeat until convergence is attained.\nImportantly, the approximated Hessian will converge to the Hessian so long as the Wolfe conditions (a set of conditions on the likelihood) are satisfied.\nThe easiest guess for the initial Hessian is the identity matrix, making the first step simply a gradient descent.\nWhen the identity matrix is used as an initial guess, the quasi-Newton methods converge \"super-linearly\"--that is it displays linear convergece initially, but approach quadratic convergence as the approximated Hessian updates itself.\nThere are many quasi-Newton methods, but the most common is the \"BFGS\" updating method.\n\nIn terms of time to convergence, quasi-Newton is typically much faster than pure Newton methods.\nThis addresses the first drawback listed for Newton's method, but it is still susceptible to the second issue.\nThe other potential challenge with Quasi-Newton methods occurs when the Wolfe conditions are not satisfied - the method will typically not converge to the Hessian within a reasonable number of iterations, and can often exceed the maximum iterations set by a program.\n\n## EM (Expectation-Maximiation) Algorithm\n\nThe EM algorithm is another way of approximating the likelihood function and maximizing that approximation.\nIt does this in a repeating series of stseps: the E (Expectation) step and the M (Maximization) step.\nIn random effect models, where normality is assumed, the E-step results in an a quadratic function to be maximized in the M-step.\nImportantly, each iteration of the EM algorithm is guaranteed to increase the likelihood function, a feature that that may be too difficult to attain with the Newton methods when a quadratic function is not yet a good approximation.\nThus, even if the likelihood function not well approximated by a quadratic function, we are assured to be getting closer to a maximum with the EM algorithm.\nThus the EM algorithm fixes the second issue from Newton's method.\nHowever, it only displays linear convergence (as opposed to \"super linear\" or \"quadratic\") and can therefore take a very long time to converge.\n\n## Implementation in Different Programs\n\n### Stata/MPlus/HLM\n\nStata, Mplus, and HLM, each use a combination of the EM and the quasi-Newton methods when estimating models with random effects.\nThe algorithms start with the EM algorithm and proceed until there is sufficient concavity to switch a quasi-Newton method.\nUsing a combination of the EM and quasi-Newton methods minimizes computational time while maximizing the opportunity that the algorithm will converge to a maximum.\nMplus and HLM will even switch back to the EM algorithm if the Wolfe conditions are not attained in a set amount of time; thus, my experience has been that Mplus and HLM tend to converge the fastest and tend to minimize convergence issues.\n\nDisclaimer: sometimes you may need to manually increase the number of EM iterations allowed to acheive convergence.\n\n### R\n\nIf I am interpreting the lmerControls documentation correctly, this method starts with the EM algorithm and then applies \"unconstrained and box-constrained optimization using PORT routines\" from the nlminb function.\nI'll classify this algorithm as \"other\", as opposed to the three named approaches above.\n\nIn my opinion, lme's optimization algorithm is less than ideal for two reasons.\nFirst, the number of initial EM steps is fixed and who's to say that the default number of EM iterations will bring us to a region where the log-likelihood function is sufficiently concave?\n\nSecond, HLM and Mplus have been estimating random effect models for a long time, and developers from both have come to the conclusion that the quasi-Newton method as the second method in a combination is the best for these models.\nI'll assume this is a very informed decision on the end of these developers.\nYet, it does not appear that this is what is occuring in R.\nInstead, R uses \"unconstrained and box-constrained optimization using PORT routines,\" whatever that is.\n\nEven the according to the \"See Also\" section in the nlminb help file, the optim function is listed as preferred over the nlminb function.\nAs it turns out, the optim function applies the \"BFGS\" quasi-Newton method as the default, which is consistent with Stata's approach.\n","srcMarkdownNoYaml":"\n\n## Convergence and optimization algorithms\n\nUnlike OLS, which has a simple closed-form solution for parameter estimates, multi-level models are complex and often do not have closed-form solutions.[^lmer_optimization-1]\nAs a result, programming languages use optimization algorithms to fit models.\nThese optimization algorithms are typically iterative processes that repeatedly test potential values and eventually converge to the model estimates.\n\n[^lmer_optimization-1]: \"Closed form\" means that there is a formula you can use to simply and directly calculate your estimates.\n    For example, in OLS your matrix equation for $\\hat{\\beta} = (X'X)^{-1}X'Y$\n\nTypically, optimization algorithms involve approximating the log-likelihood function as a multivariate quadratic function.\nSometimes this approximation is easy to find and closely matches the true log-likelihood; in these cases, convergence occurs quickly.\nHowever, we've seen that convergence is trickier when the log-likelihood function is flat near the maximum; it's also trickier with more complex and fragile likelihoods, like those created by the link functions from Generalized Least Squares (GLS) models.\n\n## What to do when your model won't converge\n\nIf your error won't converge, you might get a warning message like this:\n\nWarning message: In checkConv(attr(opt, \"derivs\"), opt$par, ctrl = control$checkConv, : Model failed to converge with max\\|grad\\| = 0.0463355 (tol = 0.001, component 1)\n\nThis warning message tells us two things.\nFirst, remember that we are trying to find the maximum of the likelihood function, or the place where the `slope = 0`.\nIn the warning, the `tol = 0.001` tells us that R will be happy if it finds estimates where the `slope` $\\leq$ `0.001`.\nIt's also saying that our slope when R stopped converging was `0.0463355`.\n\nSteps that you can take to resolve:\n\n```{=tex}\n\\begin{enumerate}\n  \\item Try rescaling variables and refitting your model\n  \\item Try changing your optimizer settings\n\\end{enumerate}\n```\nTo address items #2 and #3, you add a `Control` option into your `lme`, `lmer`, or `glmer` function.\nEach of those functions has its own option, but they all take the same arguments:\n\n```{=tex}\n\\begin{enumerate}\n  \\item lme: lmeControl()\n  \\item lmer: lmerControl()\n  \\item glmer: glmerControl()\n\\end{enumerate}\n```\nBelow are some other optimizer options that you can try.\nFor simplicitly, we're specifying them all as \"glmer\" options, but you could easily adjust them to match whichever model you are trying (but failing) to fit:\n\n```{r, eval = FALSE, }\n## Use a Nelder-Mead optimizer\nlog_mod <- glmer(pass ~ (gender + frl_new + f3) + \n                   (gender + frl_new + f3|sch), \n                 data = wide_dat, family = binomial(),\n                 control = glmerControl(optimizer = 'Nelder_Mead'))\n\n## Use a BFGS optimizer \nlog_mod <- glmer(pass ~ (gender + frl_new + f3) + \n                   (gender + frl_new + f3|sch), \n                 data = wide_dat, family = binomial(),\n                 control = glmerControl(optimizer=\"optim\", optimMethod = \"BFGS\"))\n\n#If these aren't working, you can downlaod a special package to use the optimx optimizer\n#install.packages(‘optimx’)\nlibrary(optimx)\nlog_mod <- glmer(pass ~ (gender + frl_new + f3) + \n                   (gender + frl_new + f3|sch), \n                 data = wide_dat, family = binomial(),\n                 glmerControl(optimizer = 'optimx', calc.derivs = FALSE,\n                              optCtrl = list(method = \"L-BFGS-B\", \n                                             starttests = FALSE, \n                                             kkt = FALSE)))\n```\n\nAside from these examples, there are many other ways to adjust your optimization commands, which can be found here: https://rdrr.io/cran/lme4/man/lmerControl.html\n\n## Technical Appendix: Understanding the Types of Optimization Algorithms\n\nThere are generally four \"types\" of algorithms employed to find MLE/REML solutions:\n\n```{=tex}\n\\begin{enumerate}\n\\item Newton methods \n\\item Quasi-Newton methods\n\\item EM algorithm \n\\item Other\n\\end{enumerate}\n```\n## Newton Methods\n\nNewton's method is the most \"pure\" of these approaches; essentially Newton's method uses a Taylor series approximation to approximate a quadratic function and find its maxima.\nIt involves finding the Hessian (a matrix containing all the second and partial derivatives from your likelihood).\nAn advantage of this approach is that it is theoretically the best of the three named approaches because it will often require fewer iterations to converge.\nHowever, there are two drawbacks:\n\n```{=tex}\n\\begin{enumerate}\n\\item When there are a large number of parameters, it is time-consuming to analytically calculate or numerically approximate all second order and mixed derivatives needed for the Hessian matrix.\n\\item In regions where the log-likelihood function is not sufficiently concave down, there is a tendency to dramatically overshoot because the step size to the next point is proportional to the inverse of the second derivative, resulting in pathological oscillations that would amplify if allowed to continue. Thus, where the log-likelihood function is not well approximated by a second order Taylor expansion, the method tends to fail miserably. This would be the case, for example, if the log-likelihood function was a standard normal density and you started out 2 SD from the mean.\n\\end{enumerate}\n```\n## Quasi-Newton Methods\n\nQuasi-Newton methods start with a \"guess\" for the Hessian, apply the quadratic formula to attain a new point, update the guess of the Hessian, and repeat until convergence is attained.\nImportantly, the approximated Hessian will converge to the Hessian so long as the Wolfe conditions (a set of conditions on the likelihood) are satisfied.\nThe easiest guess for the initial Hessian is the identity matrix, making the first step simply a gradient descent.\nWhen the identity matrix is used as an initial guess, the quasi-Newton methods converge \"super-linearly\"--that is it displays linear convergece initially, but approach quadratic convergence as the approximated Hessian updates itself.\nThere are many quasi-Newton methods, but the most common is the \"BFGS\" updating method.\n\nIn terms of time to convergence, quasi-Newton is typically much faster than pure Newton methods.\nThis addresses the first drawback listed for Newton's method, but it is still susceptible to the second issue.\nThe other potential challenge with Quasi-Newton methods occurs when the Wolfe conditions are not satisfied - the method will typically not converge to the Hessian within a reasonable number of iterations, and can often exceed the maximum iterations set by a program.\n\n## EM (Expectation-Maximiation) Algorithm\n\nThe EM algorithm is another way of approximating the likelihood function and maximizing that approximation.\nIt does this in a repeating series of stseps: the E (Expectation) step and the M (Maximization) step.\nIn random effect models, where normality is assumed, the E-step results in an a quadratic function to be maximized in the M-step.\nImportantly, each iteration of the EM algorithm is guaranteed to increase the likelihood function, a feature that that may be too difficult to attain with the Newton methods when a quadratic function is not yet a good approximation.\nThus, even if the likelihood function not well approximated by a quadratic function, we are assured to be getting closer to a maximum with the EM algorithm.\nThus the EM algorithm fixes the second issue from Newton's method.\nHowever, it only displays linear convergence (as opposed to \"super linear\" or \"quadratic\") and can therefore take a very long time to converge.\n\n## Implementation in Different Programs\n\n### Stata/MPlus/HLM\n\nStata, Mplus, and HLM, each use a combination of the EM and the quasi-Newton methods when estimating models with random effects.\nThe algorithms start with the EM algorithm and proceed until there is sufficient concavity to switch a quasi-Newton method.\nUsing a combination of the EM and quasi-Newton methods minimizes computational time while maximizing the opportunity that the algorithm will converge to a maximum.\nMplus and HLM will even switch back to the EM algorithm if the Wolfe conditions are not attained in a set amount of time; thus, my experience has been that Mplus and HLM tend to converge the fastest and tend to minimize convergence issues.\n\nDisclaimer: sometimes you may need to manually increase the number of EM iterations allowed to acheive convergence.\n\n### R\n\nIf I am interpreting the lmerControls documentation correctly, this method starts with the EM algorithm and then applies \"unconstrained and box-constrained optimization using PORT routines\" from the nlminb function.\nI'll classify this algorithm as \"other\", as opposed to the three named approaches above.\n\nIn my opinion, lme's optimization algorithm is less than ideal for two reasons.\nFirst, the number of initial EM steps is fixed and who's to say that the default number of EM iterations will bring us to a region where the log-likelihood function is sufficiently concave?\n\nSecond, HLM and Mplus have been estimating random effect models for a long time, and developers from both have come to the conclusion that the quasi-Newton method as the second method in a combination is the best for these models.\nI'll assume this is a very informed decision on the end of these developers.\nYet, it does not appear that this is what is occuring in R.\nInstead, R uses \"unconstrained and box-constrained optimization using PORT routines,\" whatever that is.\n\nEven the according to the \"See Also\" section in the nlminb help file, the optim function is listed as preferred over the nlminb function.\nAs it turns out, the optim function applies the \"BFGS\" quasi-Newton method as the default, which is consistent with Stata's approach.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"pygments","output-file":"lmer_optimization.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","bibliography":["references.bib"],"output_dir":"docs","editor":{"markdown":{"wrap":"sentence"}},"theme":"cosmo","code-copy":true,"title":"Optimization Algorithms for MLMs","author":"Luke Miratrix"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","highlight-style":"pygments","output-file":"lmer_optimization.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"output_dir":"docs","editor":{"markdown":{"wrap":"sentence"}},"documentclass":"scrreprt","title":"Optimization Algorithms for MLMs","author":"Luke Miratrix"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}