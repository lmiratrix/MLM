{"title":"Example of making plots with `expand.grid`","markdown":{"yaml":{"title":"Example of making plots with `expand.grid`","author":"Luke Miratrix","editor":{"markdown":{"wrap":"sentence"}}},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\nknitr::opts_chunk$set(fig.width=6, fig.height=4) \n\nlibrary( tidyverse )\nlibrary( arm )\nlibrary( foreign )\n\n```\n\n\nThis script demonstrates using the `predict()` function to make plots with separate lines for different groups.\nA core element is the `expand.grid()` method.\nThe central idea is this: for each of our groups we manually create a series of points at different levels of our covariate (e.g. ses or time) and then predict the outcome for each of these values.\nWe then plot these predicted points, and it makes a smooth curve for that group.\n\nIn this document we start with clustered data (the HS&B dataset) and then illustrate how to this with longitudinal data as well.\n\n## Making plots for the HS&B Dataset\n\nIn this section we first look at how to plot the model results by making a tiny dataset from the fixed effects, and then we extend to more powerful plotting of individual schools.\n\n### Setting up the HS&B data\n\n```{r, include=FALSE}\n\n## read student data\ndat = read.spss( \"data/hsb1.sav\", to.data.frame=TRUE )\nhead( dat )\n\n## read school data\nsdat = read.spss( \"data/hsb2.sav\", to.data.frame=TRUE )\nhead( sdat )\nsdat$sector = factor( sdat$sector, levels=c(0,1), labels=c(\"public\",\"catholic\") )\nsdat$pracad = sdat$disclim = sdat$himinty = NULL\n\ndat = merge( dat, sdat, by=\"id\", all=TRUE )\n\n```\n\nThe \"many small worlds\" view says each school has its own regression line.\nWe are going to plot them all.\nSee the lecture code files for how to load the HS&B dataset.\nFor clarity it is omitted from the printout.\nWe end up with this for the schools:\n\n```{r}\nhead( sdat )\n```\n\nand this for students (we merged in the school info already):\n\n```{r}\nhead( dat )\n```\n\nWe fit a fancy random slopes model with 2nd level covariates that impact both the overall school means and the ses by math achievment slopes.\nOur model is $$\n\\begin{aligned}\ny_{ij} &= \\beta_{0j} + \\beta_{1j} ses_{ij} +  \\epsilon_{ij} \\\\\n\\beta_{0j} &= \\gamma_{00} + \\gamma_{01} sector_j + u_{0j} \\\\\n\\beta_{1j} &= \\gamma_{10} + \\gamma_{11} sector_j + u_{1j} \n\\end{aligned}\n$$ We omit the equations for the random effect distributions.\nThe $\\epsilon_{ij}$ are normal, and the $(u_{0j},u_{1j})$ are bivariate normal, as usual.\nWe fit the model as so:\n\n```{r}\nM1 = lmer( mathach ~ 1 + ses*sector + (1 + ses|id), data=dat )\n\ndisplay( M1 )\n```\n\n### Plotting the model results\n\nWe can plot the model results by making a little dataset by hand.\nThis section of the handout illustrates how you can hand-construct plots by directly calculating predicted values from your model.\nThis is a very useful skill, and we recommend studying this area of the handout as a way of learning how to control plotting at a very direct level.\n\nSo, to continue, we proceed in three steps.\n\n*Step 1: Decide on the plot.* Let's make a plot of outcome vs. ses with two lines (one for catholic and one for public).\nSometimes it is worth actually sketching the desired plot on scratch paper, identifying the x and y axes and general lines desired.\n\n*Step 2: calculate some outcomes using our model.* We do this by deciding what values we want to plot, and then making the outcome.\n\n```{r}\nquantile( dat$ses, c( 0.05, 0.95 ) )\nplt = data.frame( ses = c(-1.5, 1.25, -1.5, 1.25 ),\n                  catholic = c( 0, 0, 1, 1 ) )\ncf = fixef( M1 )\ncf\nplt = mutate( plt,\n              Y = cf[[1]] + cf[[2]]*ses + cf[[3]]*catholic + cf[[4]]*ses*catholic )\nplt\n```\n\nNote that we have made a little mini-dataset with just the points we want to put on our plot.\nWe calculated these points \"by hand\".\nThere is no shame in this.\n\n*Step 3: plot.* We plot using ggplot:\n\n```{r}\nplt$catholic = factor( plt$catholic, \n                       labels=c(\"public\",\"catholic\"),\n                       levels=c(0,1) )\nggplot( plt, aes( ses, Y, col=catholic ) ) +\n    geom_line()\n```\n\n#### A fancy diversion: categorical variables on the $x$-axis\n\nSay we decided to fit a model where we have ses **categories**:\n\n```{r}\ndat$ses.cat = cut( dat$ses, \n                   breaks=quantile( dat$ses, c( 0, 0.33, 0.67, 1 ) ),\n                   labels = c( \"low\",\"mid\",\"high\"),\n                   include.lowest = TRUE )\ntable( dat$ses.cat )\nM1b = lmer( mathach ~ 1 + ses.cat*sector + (1 + ses|id), data=dat )\ndisplay( M1b )\n```\n\nMake our outcomes:\n\n```{r}\nplt = data.frame( ses.mid = c( 0, 1, 0, 0, 1, 0 ),\n                  ses.high = c( 0, 0, 1, 0, 0, 1 ),\n                  catholic = c( 0, 0, 0, 1, 1, 1 ) )\ncf = fixef( M1b )\ncf\nplt = mutate( plt,\n              Y = cf[[1]] + cf[[2]]*ses.mid + cf[[3]]*ses.high +\n                cf[[4]]*catholic + cf[[5]]*ses.mid*catholic + cf[[6]]*ses.high*catholic )\nplt\n```\n\nAnd plot\n\n```{r}\nplt$catholic = factor( plt$catholic, \n                       labels=c(\"public\",\"catholic\"),\n                       levels=c(0,1) )\nplt$ses = \"low\"\nplt$ses[plt$ses.mid==1] = \"mid\"\nplt$ses[plt$ses.high==1] = \"high\"\nplt$ses = factor( plt$ses, levels=c(\"low\",\"mid\",\"high\") )\nggplot( plt, aes( ses, Y, col=catholic, group=catholic ) ) +\n    geom_line() + geom_point()\n```\n\nNote the *very important* `group=catholic` line that tells the plot to group everyone by catholic.\nIf not, it will get confused and note that since ses is categorical, try to group on that.\nThen it cannot make a line since each group has only a single point.\n\n### Plotting individual school regression lines\n\nWe can plot the individual lines by hand-calculating the school level slopes and intercepts.\nThis code shows how:\n\n```{r}\ncoefs = coef( M1 )$id\nhead( coefs )\ncoefs = rename( coefs, \n                gamma.00 = `(Intercept)`,\n                gamma.10 = `ses`,\n                gamma.01 = `sectorcatholic`,\n                gamma.11 = `ses:sectorcatholic` )\ncoefs$id = rownames( coefs )\ncoefs = merge( coefs, sdat, by=\"id\" )\ncoefs = mutate( coefs,\n                beta.0 = gamma.00 + gamma.01 * (sector==\"catholic\"),\n                beta.1 = gamma.10 + gamma.11 * (sector==\"catholic\") )\n\n```\n\nNote how we have to add up our gammas to get our betas for each school.\nSee our final betas, one set for each school:\n\n```{r}\nhead( dplyr::select( coefs, -gamma.00, -gamma.10, -gamma.01, -gamma.11 ) )\n```\n\nNow let's plot a subsample of 20 schools\n\n```{r}\nset.seed( 102030 )\nsub20 = sample( unique( dat$id ), 20 )\n\ncoefs.20 = filter( coefs, id %in% sub20 )\n\nggplot( coefs.20, aes( group=id ) ) +\n  geom_abline( aes( slope=beta.1, intercept=beta.0, col=sector) ) +\n  coord_cartesian( xlim=c(-2.5,2), ylim=range(dat$mathach) )\n```\n\n*Commentary:* We need to specify the size of the plot since we have no data, just the intercepts and slopes.\nWe are using the Emperical Bayes estimates of the random effects added to our school level fixed effects to get the $\\hat{\\beta}_{0j}, \\hat{\\beta}_{1j}$ which define the school-specific regression line for school $j$.\n\nOur two types of school are clearly separated.\nCatholic schools have higher average performance, and less of a ses-achievement relationship.\nSince we have merged in our school level data, we can color the lines by catholic vs public, making our plot easier to read.\n\n### Plotting with predict()\n\nA more general plotitng approach is to plot using `predict()`, where for each student we predict the outcome.\n\n```{r}\ndat$math.hat = predict( M1 )\n```\n\nNow let's plot a subsample of 20 schools\n\n```{r}\ndat.20 = filter( dat, id %in% sub20 )\n\nggplot( dat.20, aes( ses, math.hat, group=id, col=sector ) ) +\n  geom_line()\n```\n\nBut look at how the lines don't go the full distance.\nWhat ggplot is doing is plotting the individual students, and connecting them with a line.\nWe can see this by plotting the students as well, like this:\n\n```{r}\nggplot( dat.20, aes( ses, math.hat, group=id, col=sector ) ) +\n  geom_line() +\n  geom_point()\n```\n\nWe have a predicted outcome for each student, which removes the student residual, giving just the school trends.\nIf we don't have students for some range of ses for a school, we won't have points in our plot for that range for that school.\nThe lines thus give the ranges (left to right) of the ses values in each school.\n\n### Making our lines go the same length with expand.grid()\n\nThe way we fix this is we, for each school, make a bunch of fake students with different SES and predict along all those fake students.\nThis will give us equally spaced lines.\n\nThat being said: the shorter lines above are also informative, as they give you a sense of what the range of ses for each school actually is.\nWhich approach is somewhat a matter of taste.\n\nWe can generate fake children of each group for each school using `expand.grid()`.\nThis method will generate a dataframe with all combinations of the given variables supplied.\nHere we make all combinations of ses, for a set of ses values, and school id.\n\n```{r}\nsynth.dat = expand_grid( id = unique( dat$id ),\n                         ses = seq( -2.5, 2, length.out=9 ) )\nhead( synth.dat )\n```\n\nThe `seq()` command makes an evenly spaced *seq*uence of numbers going from the first to the last, with 9 numbers.\nE.g.,\n\n```{r}\nseq( 1, 10, length.out=4 )\n```\n\nWe then merge our school info back in to get sector for each school id:\n\n```{r}\nsynth.dat = merge( synth.dat, sdat, by=\"id\", all.x=TRUE )\n```\n\nWe finally predict for each school, predicting outcome for our fake kids in each school.\n\n```{r}\nsynth.dat$math.hat = predict( M1, newdata=synth.dat )\n```\n\nWe have predictions just as above, just for students that we set for each school.\nThe school random effects and everything remain because we are using the original school ids.\n\nUsing our new data, plot 20 random schools--this code is the same as in the prior subsection.\n\n```{r}\nsynth.dat.20 = filter( synth.dat, id %in% sub20 )\n\nggplot( synth.dat.20, aes( ses, math.hat, group=id, col=sector ) ) +\n  geom_line()\n```\n\nBut see our equally spaced students?\n\n```{r}\nggplot( synth.dat.20, aes( ses, math.hat, group=id, col=sector ) ) +\n  geom_line() +\n  geom_point()\n```\n\n**Why do this?** The `predict()` approach allows us to avoid working with the gammas and adding them up like we did above.\nThis is a flexible and powerful approach that avoids a lot of work in many cases.\nIn the next section we illustrate by fitting curves rather than lines.\nThis would be very hard to do directly.\n\n### Superfancy extra bonus plotting of complex models!\n\nWe can use predict for weird nonlinear relationships also.\nThis will be important for longitudinal data.\nTo illustrate we fit a model that allows a quadradic relationship between ses and math achievement.\n\n```{r}\ndat$ses2 = dat$ses^2\nM2 = lmer( mathach ~ 1 + (ses + ses2)*sector + meanses + (1 + ses|id), data=dat )\n\ndisplay( M2 )\n```\n\nTo fit a quadratic model we need our quadratic ses term, which we make by hand.\nWe could also have used `I(ses^2)` in the `lmer()` command directly, but people don't tend to find that easy to read.\n\nAnd here we predict and plot:\n\n```{r}\nsynth.dat = expand.grid( id = unique( dat$id ),\n                         ses= seq( -2.5, 2, length.out=9 ) )\nsynth.dat$ses2 = synth.dat$ses^2\nsynth.dat = merge( synth.dat, sdat, by=\"id\", all.x=TRUE )\n```\n\nNote how we make our `ses2` variable out of `ses` just like we did above.\n\n```{r}\nsynth.dat$math.hat = predict( M2, newdata=synth.dat )\n\nsynth.dat.20 = filter( synth.dat, id %in% sub20 )\n\nggplot( synth.dat.20, aes( ses, math.hat, group=id, col=sector ) ) +\n  geom_line()\n```\n\nThis code is the same as above.\nThe prediction handles all our model complexity for us.\n\nAgain, we have our equally spaced students:\n\n```{r}\nggplot( synth.dat.20, aes( ses, math.hat, group=id, col=sector ) ) +\n  geom_line() +\n  geom_point()\n```\n\n## Longitudinal Data\n\nWe next do the above, but for longitudinal data.\nThe story is basically the same.\n\n### The data\n\nWe use the \"US Sustaining Effects Study\" taken from Raudenbush and Bryk (we have not seen these data in class).\nWe have kids in grades nested in schools.\nSo longitudinal data with a clustering on top of that.\n\n```{r, include = FALSE}\ndat = readRDS( \"data/EG_data.rds\" )\ndat$RACEETH = as.factor( ifelse( dat$BLACK, \"black\", ifelse( dat$HISPANIC, \"hispanic\", \"white\" ) ) )\ndat = dplyr::select( dat, -BLACK, -HISPANIC, -RETAINED, SIZE, -LOWINC, -SIZE.INDEX, -MOBILITY )\n```\n\n```{r}\nhead( dat )\n```\n\n### A model\n\nWe will be using the following 3-level quadradic growth model:\n\n```{r fitmodel, cache=TRUE}\nM4 = lmer( MATH ~ 1 + (YEAR + I(YEAR^2)) * (FEMALE * RACEETH ) + \n                (YEAR|CHILDID:SCHOOLID) + (YEAR|SCHOOLID), data=dat )\ndisplay( M4 )\n```\n\nWe are just taking the model as given; this document is about showing the fit of this model.\nIn particular, if you haven't seen 3-level models before, just consider the above as some complex model; the nice thing about `predict()` is you don't even need to understand the model you are using!\nNote we do have a lot of fixed effect interaction terms, allowing for systematically different trajectories for groups of kids that are grouped on recorded race and gender.\n\n### The simple predict() approach\n\nWe can use our model to predict outcomes for each timepoint in the data.\nThis will smooth out the time to time variation.\n\n```{r}\ndat$Yhat = predict( M4 )\nggplot( dat, aes( YEAR, Yhat, group=CHILDID ) ) +\n  facet_grid( RACEETH ~ FEMALE ) +\n  geom_line( alpha=0.25 )\n```\n\nNote how the growth lines don't go across all years for all kids.\nThis is because we were missing data for those kids in the original dataset at those timepoints, so we didn't predict outcomes when we used the `predict()` function, above.\n\nTo fix this we will add in those missing timepoints so we get predictions for all kids for all timepoints.\n\n### The expand.grid() function\n\nWe now want different trajectories for the different groups.\nWe can generate fake children of each group for each school using `expand.grid()`.\nThis method will generate a dataframe with all combinations of the given variables supplied.\nHere we make all combinations of year, gender, and race/ethnic group for each school.\n\n```{r}\nsynth.dat = expand.grid( CHILDID = -1,\n                         SCHOOLID = levels( dat$SCHOOLID ),\n                         YEAR = unique( dat$YEAR ),\n                         FEMALE = c( 0, 1 ),\n                         RACEETH = levels( dat$RACEETH ) )\nhead( synth.dat )\nnrow( synth.dat )\n```\n\nThe `CHILDID = -1` line means we are making up a new child (not using one of the real ones) so the child random effects will be set to 0 in the predictions.\n\nOnce we have our dataset, we use predict to calculate the predicted outcomes for each student type for each year timepoint for each school:\n\n```{r}\nsynth.dat = mutate( synth.dat, MATH = predict( M4, \n                                               newdata=synth.dat,\n                                               allow.new.levels = TRUE) )\n```\n\nNow we can plot with our new predictions\n\n```{r}\nggplot( synth.dat, aes( YEAR, MATH, group=SCHOOLID ) ) +\n  facet_grid( RACEETH ~ FEMALE ) +\n  geom_line( alpha=0.5 )\n```\n\nHere we are seeing the different school trajectories for the six types of kid defined by our student-level demographics.\n\nOr, for a subset of schools\n\n```{r}\nsynth.dat = mutate( synth.dat, GENDER = ifelse( FEMALE, \"female\", \"male\" ) )\nkeepers = sample( unique( synth.dat$SCHOOLID ), 12 )\ns2 = filter( synth.dat, SCHOOLID %in% keepers )\nggplot( s2, aes( YEAR, MATH, col=RACEETH, lty=GENDER ) ) +\n  facet_wrap( ~ SCHOOLID ) +\n  geom_line( alpha=0.5) + geom_point( alpha=0.5 )\n```\n\nHere we see the six lines for the six groups within each school, plotted in little tiles, one for each school.\n\n### Population aggregation\n\nYou can also aggregate these predictions.\nThis is the easiest way to get what collection of schools, averaging over their random effects, looks like.\n\nAggregate with the `group_by()` and the `summarise()` methods:\n\n```{r}\nagg.dat = synth.dat %>% group_by( GENDER, RACEETH, YEAR ) %>%\n  dplyr::summarise( MATH = mean( MATH ) )\nggplot( agg.dat, aes( YEAR, MATH, col=RACEETH, lty=GENDER ) ) +\n  geom_line( alpha=0.5) + geom_point( alpha=0.5 )\n```\n\nOr do this via predict directly, using the prior ideas\n\n```{r}\nsynth.dat.agg = expand.grid( CHILDID = -1,\n                             SCHOOLID = -1,\n                             YEAR = unique( dat$YEAR ),\n                             FEMALE = c( 0, 1 ),\n                             RACEETH = levels( dat$RACEETH ) )\nnrow( synth.dat.agg )\nsynth.dat.agg = mutate( synth.dat.agg, \n                        MATH = predict( M4, \n                                        newdata=synth.dat.agg,\n                                        allow.new.levels = TRUE) )\nsynth.dat.agg = mutate( synth.dat.agg, GENDER = ifelse( FEMALE, \"female\", \"male\" ) )\n\nggplot( synth.dat.agg, aes( YEAR, MATH, col=RACEETH, lty=GENDER ) ) +\n  geom_line( alpha=0.5) + geom_point( alpha=0.5 )\n```\n\nThe above plot suggests that the gender gap only exists for the white children.\nIt also shows that there are racial gaps, and that the Black children appear to be falling further behind as time passes.\n\nThis block of code is stand-alone, showing the making of fake data and plotting of predictions all in one go.\nEspecially for glms, where there are nonlinearities due to the link function, this will give you the \"typical\" units, whereas the aggregation method will average over your individuals in the sample.\n\nFinally, we can also make tables to calculate observed gaps (although in many cases you can just read this sort of thing off the regression table).\nFirst `spread` our data to get columns for each race\n\n```{r}\ns3 = spread( synth.dat.agg, key=\"RACEETH\", value=\"MATH\" )\nhead( s3 )\n```\n\nThen summarise:\n\n```{r, results=\"asis\"}\ntab = s3 %>% group_by( YEAR ) %>% \n  summarise( gap.black.white = mean( white ) - mean( black ),\n             gap.hispanic.white = mean( white ) - mean( hispanic ),\n             gap.black.hispanic = mean( hispanic ) - mean( black ) )\nknitr::kable( tab, digits=2 )\n```\n\nThis again shows widening gap between Black and White students, and the closing gap of Hispanic and White students.\n\n### Plotting random effects by Level 2 variable\n\nYou can also look at estimated random effects as a function of level 2 variables.\nFor example, we can see if there is a pattern of average math score for students by year.\n\n```{r, warning=FALSE}\nranef = ranef( M4 )$SCHOOLID\nranef$SCHOOLID = rownames( ranef )\nschools = dat %>% group_by( SCHOOLID ) %>%\n  summarise( n = n(),\n             size = SIZE[[1]] )\nschools = merge( schools, ranef, by=\"SCHOOLID\" )\nhead( schools )\nggplot( schools, aes( size, `(Intercept)` ) ) +\n  geom_point() +\n  geom_smooth(method=\"lm\")\n```\n\nWe see a possible negative trend.\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\nknitr::opts_chunk$set(fig.width=6, fig.height=4) \n\nlibrary( tidyverse )\nlibrary( arm )\nlibrary( foreign )\n\n```\n\n## Introduction\n\nThis script demonstrates using the `predict()` function to make plots with separate lines for different groups.\nA core element is the `expand.grid()` method.\nThe central idea is this: for each of our groups we manually create a series of points at different levels of our covariate (e.g. ses or time) and then predict the outcome for each of these values.\nWe then plot these predicted points, and it makes a smooth curve for that group.\n\nIn this document we start with clustered data (the HS&B dataset) and then illustrate how to this with longitudinal data as well.\n\n## Making plots for the HS&B Dataset\n\nIn this section we first look at how to plot the model results by making a tiny dataset from the fixed effects, and then we extend to more powerful plotting of individual schools.\n\n### Setting up the HS&B data\n\n```{r, include=FALSE}\n\n## read student data\ndat = read.spss( \"data/hsb1.sav\", to.data.frame=TRUE )\nhead( dat )\n\n## read school data\nsdat = read.spss( \"data/hsb2.sav\", to.data.frame=TRUE )\nhead( sdat )\nsdat$sector = factor( sdat$sector, levels=c(0,1), labels=c(\"public\",\"catholic\") )\nsdat$pracad = sdat$disclim = sdat$himinty = NULL\n\ndat = merge( dat, sdat, by=\"id\", all=TRUE )\n\n```\n\nThe \"many small worlds\" view says each school has its own regression line.\nWe are going to plot them all.\nSee the lecture code files for how to load the HS&B dataset.\nFor clarity it is omitted from the printout.\nWe end up with this for the schools:\n\n```{r}\nhead( sdat )\n```\n\nand this for students (we merged in the school info already):\n\n```{r}\nhead( dat )\n```\n\nWe fit a fancy random slopes model with 2nd level covariates that impact both the overall school means and the ses by math achievment slopes.\nOur model is $$\n\\begin{aligned}\ny_{ij} &= \\beta_{0j} + \\beta_{1j} ses_{ij} +  \\epsilon_{ij} \\\\\n\\beta_{0j} &= \\gamma_{00} + \\gamma_{01} sector_j + u_{0j} \\\\\n\\beta_{1j} &= \\gamma_{10} + \\gamma_{11} sector_j + u_{1j} \n\\end{aligned}\n$$ We omit the equations for the random effect distributions.\nThe $\\epsilon_{ij}$ are normal, and the $(u_{0j},u_{1j})$ are bivariate normal, as usual.\nWe fit the model as so:\n\n```{r}\nM1 = lmer( mathach ~ 1 + ses*sector + (1 + ses|id), data=dat )\n\ndisplay( M1 )\n```\n\n### Plotting the model results\n\nWe can plot the model results by making a little dataset by hand.\nThis section of the handout illustrates how you can hand-construct plots by directly calculating predicted values from your model.\nThis is a very useful skill, and we recommend studying this area of the handout as a way of learning how to control plotting at a very direct level.\n\nSo, to continue, we proceed in three steps.\n\n*Step 1: Decide on the plot.* Let's make a plot of outcome vs. ses with two lines (one for catholic and one for public).\nSometimes it is worth actually sketching the desired plot on scratch paper, identifying the x and y axes and general lines desired.\n\n*Step 2: calculate some outcomes using our model.* We do this by deciding what values we want to plot, and then making the outcome.\n\n```{r}\nquantile( dat$ses, c( 0.05, 0.95 ) )\nplt = data.frame( ses = c(-1.5, 1.25, -1.5, 1.25 ),\n                  catholic = c( 0, 0, 1, 1 ) )\ncf = fixef( M1 )\ncf\nplt = mutate( plt,\n              Y = cf[[1]] + cf[[2]]*ses + cf[[3]]*catholic + cf[[4]]*ses*catholic )\nplt\n```\n\nNote that we have made a little mini-dataset with just the points we want to put on our plot.\nWe calculated these points \"by hand\".\nThere is no shame in this.\n\n*Step 3: plot.* We plot using ggplot:\n\n```{r}\nplt$catholic = factor( plt$catholic, \n                       labels=c(\"public\",\"catholic\"),\n                       levels=c(0,1) )\nggplot( plt, aes( ses, Y, col=catholic ) ) +\n    geom_line()\n```\n\n#### A fancy diversion: categorical variables on the $x$-axis\n\nSay we decided to fit a model where we have ses **categories**:\n\n```{r}\ndat$ses.cat = cut( dat$ses, \n                   breaks=quantile( dat$ses, c( 0, 0.33, 0.67, 1 ) ),\n                   labels = c( \"low\",\"mid\",\"high\"),\n                   include.lowest = TRUE )\ntable( dat$ses.cat )\nM1b = lmer( mathach ~ 1 + ses.cat*sector + (1 + ses|id), data=dat )\ndisplay( M1b )\n```\n\nMake our outcomes:\n\n```{r}\nplt = data.frame( ses.mid = c( 0, 1, 0, 0, 1, 0 ),\n                  ses.high = c( 0, 0, 1, 0, 0, 1 ),\n                  catholic = c( 0, 0, 0, 1, 1, 1 ) )\ncf = fixef( M1b )\ncf\nplt = mutate( plt,\n              Y = cf[[1]] + cf[[2]]*ses.mid + cf[[3]]*ses.high +\n                cf[[4]]*catholic + cf[[5]]*ses.mid*catholic + cf[[6]]*ses.high*catholic )\nplt\n```\n\nAnd plot\n\n```{r}\nplt$catholic = factor( plt$catholic, \n                       labels=c(\"public\",\"catholic\"),\n                       levels=c(0,1) )\nplt$ses = \"low\"\nplt$ses[plt$ses.mid==1] = \"mid\"\nplt$ses[plt$ses.high==1] = \"high\"\nplt$ses = factor( plt$ses, levels=c(\"low\",\"mid\",\"high\") )\nggplot( plt, aes( ses, Y, col=catholic, group=catholic ) ) +\n    geom_line() + geom_point()\n```\n\nNote the *very important* `group=catholic` line that tells the plot to group everyone by catholic.\nIf not, it will get confused and note that since ses is categorical, try to group on that.\nThen it cannot make a line since each group has only a single point.\n\n### Plotting individual school regression lines\n\nWe can plot the individual lines by hand-calculating the school level slopes and intercepts.\nThis code shows how:\n\n```{r}\ncoefs = coef( M1 )$id\nhead( coefs )\ncoefs = rename( coefs, \n                gamma.00 = `(Intercept)`,\n                gamma.10 = `ses`,\n                gamma.01 = `sectorcatholic`,\n                gamma.11 = `ses:sectorcatholic` )\ncoefs$id = rownames( coefs )\ncoefs = merge( coefs, sdat, by=\"id\" )\ncoefs = mutate( coefs,\n                beta.0 = gamma.00 + gamma.01 * (sector==\"catholic\"),\n                beta.1 = gamma.10 + gamma.11 * (sector==\"catholic\") )\n\n```\n\nNote how we have to add up our gammas to get our betas for each school.\nSee our final betas, one set for each school:\n\n```{r}\nhead( dplyr::select( coefs, -gamma.00, -gamma.10, -gamma.01, -gamma.11 ) )\n```\n\nNow let's plot a subsample of 20 schools\n\n```{r}\nset.seed( 102030 )\nsub20 = sample( unique( dat$id ), 20 )\n\ncoefs.20 = filter( coefs, id %in% sub20 )\n\nggplot( coefs.20, aes( group=id ) ) +\n  geom_abline( aes( slope=beta.1, intercept=beta.0, col=sector) ) +\n  coord_cartesian( xlim=c(-2.5,2), ylim=range(dat$mathach) )\n```\n\n*Commentary:* We need to specify the size of the plot since we have no data, just the intercepts and slopes.\nWe are using the Emperical Bayes estimates of the random effects added to our school level fixed effects to get the $\\hat{\\beta}_{0j}, \\hat{\\beta}_{1j}$ which define the school-specific regression line for school $j$.\n\nOur two types of school are clearly separated.\nCatholic schools have higher average performance, and less of a ses-achievement relationship.\nSince we have merged in our school level data, we can color the lines by catholic vs public, making our plot easier to read.\n\n### Plotting with predict()\n\nA more general plotitng approach is to plot using `predict()`, where for each student we predict the outcome.\n\n```{r}\ndat$math.hat = predict( M1 )\n```\n\nNow let's plot a subsample of 20 schools\n\n```{r}\ndat.20 = filter( dat, id %in% sub20 )\n\nggplot( dat.20, aes( ses, math.hat, group=id, col=sector ) ) +\n  geom_line()\n```\n\nBut look at how the lines don't go the full distance.\nWhat ggplot is doing is plotting the individual students, and connecting them with a line.\nWe can see this by plotting the students as well, like this:\n\n```{r}\nggplot( dat.20, aes( ses, math.hat, group=id, col=sector ) ) +\n  geom_line() +\n  geom_point()\n```\n\nWe have a predicted outcome for each student, which removes the student residual, giving just the school trends.\nIf we don't have students for some range of ses for a school, we won't have points in our plot for that range for that school.\nThe lines thus give the ranges (left to right) of the ses values in each school.\n\n### Making our lines go the same length with expand.grid()\n\nThe way we fix this is we, for each school, make a bunch of fake students with different SES and predict along all those fake students.\nThis will give us equally spaced lines.\n\nThat being said: the shorter lines above are also informative, as they give you a sense of what the range of ses for each school actually is.\nWhich approach is somewhat a matter of taste.\n\nWe can generate fake children of each group for each school using `expand.grid()`.\nThis method will generate a dataframe with all combinations of the given variables supplied.\nHere we make all combinations of ses, for a set of ses values, and school id.\n\n```{r}\nsynth.dat = expand_grid( id = unique( dat$id ),\n                         ses = seq( -2.5, 2, length.out=9 ) )\nhead( synth.dat )\n```\n\nThe `seq()` command makes an evenly spaced *seq*uence of numbers going from the first to the last, with 9 numbers.\nE.g.,\n\n```{r}\nseq( 1, 10, length.out=4 )\n```\n\nWe then merge our school info back in to get sector for each school id:\n\n```{r}\nsynth.dat = merge( synth.dat, sdat, by=\"id\", all.x=TRUE )\n```\n\nWe finally predict for each school, predicting outcome for our fake kids in each school.\n\n```{r}\nsynth.dat$math.hat = predict( M1, newdata=synth.dat )\n```\n\nWe have predictions just as above, just for students that we set for each school.\nThe school random effects and everything remain because we are using the original school ids.\n\nUsing our new data, plot 20 random schools--this code is the same as in the prior subsection.\n\n```{r}\nsynth.dat.20 = filter( synth.dat, id %in% sub20 )\n\nggplot( synth.dat.20, aes( ses, math.hat, group=id, col=sector ) ) +\n  geom_line()\n```\n\nBut see our equally spaced students?\n\n```{r}\nggplot( synth.dat.20, aes( ses, math.hat, group=id, col=sector ) ) +\n  geom_line() +\n  geom_point()\n```\n\n**Why do this?** The `predict()` approach allows us to avoid working with the gammas and adding them up like we did above.\nThis is a flexible and powerful approach that avoids a lot of work in many cases.\nIn the next section we illustrate by fitting curves rather than lines.\nThis would be very hard to do directly.\n\n### Superfancy extra bonus plotting of complex models!\n\nWe can use predict for weird nonlinear relationships also.\nThis will be important for longitudinal data.\nTo illustrate we fit a model that allows a quadradic relationship between ses and math achievement.\n\n```{r}\ndat$ses2 = dat$ses^2\nM2 = lmer( mathach ~ 1 + (ses + ses2)*sector + meanses + (1 + ses|id), data=dat )\n\ndisplay( M2 )\n```\n\nTo fit a quadratic model we need our quadratic ses term, which we make by hand.\nWe could also have used `I(ses^2)` in the `lmer()` command directly, but people don't tend to find that easy to read.\n\nAnd here we predict and plot:\n\n```{r}\nsynth.dat = expand.grid( id = unique( dat$id ),\n                         ses= seq( -2.5, 2, length.out=9 ) )\nsynth.dat$ses2 = synth.dat$ses^2\nsynth.dat = merge( synth.dat, sdat, by=\"id\", all.x=TRUE )\n```\n\nNote how we make our `ses2` variable out of `ses` just like we did above.\n\n```{r}\nsynth.dat$math.hat = predict( M2, newdata=synth.dat )\n\nsynth.dat.20 = filter( synth.dat, id %in% sub20 )\n\nggplot( synth.dat.20, aes( ses, math.hat, group=id, col=sector ) ) +\n  geom_line()\n```\n\nThis code is the same as above.\nThe prediction handles all our model complexity for us.\n\nAgain, we have our equally spaced students:\n\n```{r}\nggplot( synth.dat.20, aes( ses, math.hat, group=id, col=sector ) ) +\n  geom_line() +\n  geom_point()\n```\n\n## Longitudinal Data\n\nWe next do the above, but for longitudinal data.\nThe story is basically the same.\n\n### The data\n\nWe use the \"US Sustaining Effects Study\" taken from Raudenbush and Bryk (we have not seen these data in class).\nWe have kids in grades nested in schools.\nSo longitudinal data with a clustering on top of that.\n\n```{r, include = FALSE}\ndat = readRDS( \"data/EG_data.rds\" )\ndat$RACEETH = as.factor( ifelse( dat$BLACK, \"black\", ifelse( dat$HISPANIC, \"hispanic\", \"white\" ) ) )\ndat = dplyr::select( dat, -BLACK, -HISPANIC, -RETAINED, SIZE, -LOWINC, -SIZE.INDEX, -MOBILITY )\n```\n\n```{r}\nhead( dat )\n```\n\n### A model\n\nWe will be using the following 3-level quadradic growth model:\n\n```{r fitmodel, cache=TRUE}\nM4 = lmer( MATH ~ 1 + (YEAR + I(YEAR^2)) * (FEMALE * RACEETH ) + \n                (YEAR|CHILDID:SCHOOLID) + (YEAR|SCHOOLID), data=dat )\ndisplay( M4 )\n```\n\nWe are just taking the model as given; this document is about showing the fit of this model.\nIn particular, if you haven't seen 3-level models before, just consider the above as some complex model; the nice thing about `predict()` is you don't even need to understand the model you are using!\nNote we do have a lot of fixed effect interaction terms, allowing for systematically different trajectories for groups of kids that are grouped on recorded race and gender.\n\n### The simple predict() approach\n\nWe can use our model to predict outcomes for each timepoint in the data.\nThis will smooth out the time to time variation.\n\n```{r}\ndat$Yhat = predict( M4 )\nggplot( dat, aes( YEAR, Yhat, group=CHILDID ) ) +\n  facet_grid( RACEETH ~ FEMALE ) +\n  geom_line( alpha=0.25 )\n```\n\nNote how the growth lines don't go across all years for all kids.\nThis is because we were missing data for those kids in the original dataset at those timepoints, so we didn't predict outcomes when we used the `predict()` function, above.\n\nTo fix this we will add in those missing timepoints so we get predictions for all kids for all timepoints.\n\n### The expand.grid() function\n\nWe now want different trajectories for the different groups.\nWe can generate fake children of each group for each school using `expand.grid()`.\nThis method will generate a dataframe with all combinations of the given variables supplied.\nHere we make all combinations of year, gender, and race/ethnic group for each school.\n\n```{r}\nsynth.dat = expand.grid( CHILDID = -1,\n                         SCHOOLID = levels( dat$SCHOOLID ),\n                         YEAR = unique( dat$YEAR ),\n                         FEMALE = c( 0, 1 ),\n                         RACEETH = levels( dat$RACEETH ) )\nhead( synth.dat )\nnrow( synth.dat )\n```\n\nThe `CHILDID = -1` line means we are making up a new child (not using one of the real ones) so the child random effects will be set to 0 in the predictions.\n\nOnce we have our dataset, we use predict to calculate the predicted outcomes for each student type for each year timepoint for each school:\n\n```{r}\nsynth.dat = mutate( synth.dat, MATH = predict( M4, \n                                               newdata=synth.dat,\n                                               allow.new.levels = TRUE) )\n```\n\nNow we can plot with our new predictions\n\n```{r}\nggplot( synth.dat, aes( YEAR, MATH, group=SCHOOLID ) ) +\n  facet_grid( RACEETH ~ FEMALE ) +\n  geom_line( alpha=0.5 )\n```\n\nHere we are seeing the different school trajectories for the six types of kid defined by our student-level demographics.\n\nOr, for a subset of schools\n\n```{r}\nsynth.dat = mutate( synth.dat, GENDER = ifelse( FEMALE, \"female\", \"male\" ) )\nkeepers = sample( unique( synth.dat$SCHOOLID ), 12 )\ns2 = filter( synth.dat, SCHOOLID %in% keepers )\nggplot( s2, aes( YEAR, MATH, col=RACEETH, lty=GENDER ) ) +\n  facet_wrap( ~ SCHOOLID ) +\n  geom_line( alpha=0.5) + geom_point( alpha=0.5 )\n```\n\nHere we see the six lines for the six groups within each school, plotted in little tiles, one for each school.\n\n### Population aggregation\n\nYou can also aggregate these predictions.\nThis is the easiest way to get what collection of schools, averaging over their random effects, looks like.\n\nAggregate with the `group_by()` and the `summarise()` methods:\n\n```{r}\nagg.dat = synth.dat %>% group_by( GENDER, RACEETH, YEAR ) %>%\n  dplyr::summarise( MATH = mean( MATH ) )\nggplot( agg.dat, aes( YEAR, MATH, col=RACEETH, lty=GENDER ) ) +\n  geom_line( alpha=0.5) + geom_point( alpha=0.5 )\n```\n\nOr do this via predict directly, using the prior ideas\n\n```{r}\nsynth.dat.agg = expand.grid( CHILDID = -1,\n                             SCHOOLID = -1,\n                             YEAR = unique( dat$YEAR ),\n                             FEMALE = c( 0, 1 ),\n                             RACEETH = levels( dat$RACEETH ) )\nnrow( synth.dat.agg )\nsynth.dat.agg = mutate( synth.dat.agg, \n                        MATH = predict( M4, \n                                        newdata=synth.dat.agg,\n                                        allow.new.levels = TRUE) )\nsynth.dat.agg = mutate( synth.dat.agg, GENDER = ifelse( FEMALE, \"female\", \"male\" ) )\n\nggplot( synth.dat.agg, aes( YEAR, MATH, col=RACEETH, lty=GENDER ) ) +\n  geom_line( alpha=0.5) + geom_point( alpha=0.5 )\n```\n\nThe above plot suggests that the gender gap only exists for the white children.\nIt also shows that there are racial gaps, and that the Black children appear to be falling further behind as time passes.\n\nThis block of code is stand-alone, showing the making of fake data and plotting of predictions all in one go.\nEspecially for glms, where there are nonlinearities due to the link function, this will give you the \"typical\" units, whereas the aggregation method will average over your individuals in the sample.\n\nFinally, we can also make tables to calculate observed gaps (although in many cases you can just read this sort of thing off the regression table).\nFirst `spread` our data to get columns for each race\n\n```{r}\ns3 = spread( synth.dat.agg, key=\"RACEETH\", value=\"MATH\" )\nhead( s3 )\n```\n\nThen summarise:\n\n```{r, results=\"asis\"}\ntab = s3 %>% group_by( YEAR ) %>% \n  summarise( gap.black.white = mean( white ) - mean( black ),\n             gap.hispanic.white = mean( white ) - mean( hispanic ),\n             gap.black.hispanic = mean( hispanic ) - mean( black ) )\nknitr::kable( tab, digits=2 )\n```\n\nThis again shows widening gap between Black and White students, and the closing gap of Hispanic and White students.\n\n### Plotting random effects by Level 2 variable\n\nYou can also look at estimated random effects as a function of level 2 variables.\nFor example, we can see if there is a pattern of average math score for students by year.\n\n```{r, warning=FALSE}\nranef = ranef( M4 )$SCHOOLID\nranef$SCHOOLID = rownames( ranef )\nschools = dat %>% group_by( SCHOOLID ) %>%\n  summarise( n = n(),\n             size = SIZE[[1]] )\nschools = merge( schools, ranef, by=\"SCHOOLID\" )\nhead( schools )\nggplot( schools, aes( size, `(Intercept)` ) ) +\n  geom_point() +\n  geom_smooth(method=\"lm\")\n```\n\nWe see a possible negative trend.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"pygments","output-file":"plot_expand_grid.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","bibliography":["references.bib"],"output_dir":"docs","editor":{"markdown":{"wrap":"sentence"}},"theme":"cosmo","code-copy":true,"title":"Example of making plots with `expand.grid`","author":"Luke Miratrix"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","highlight-style":"pygments","output-file":"plot_expand_grid.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"output_dir":"docs","editor":{"markdown":{"wrap":"sentence"}},"documentclass":"scrreprt","title":"Example of making plots with `expand.grid`","author":"Luke Miratrix"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}