# Tips, Tricks, and Debugging in R

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

options(width = 90)
library(tidyverse)
library(knitr)
options( digits = 3 )
opts_knit$set(progress = TRUE)
opts_chunk$set(progress = TRUE, verbose = TRUE, prompt=FALSE,
               echo=TRUE, fig.align="center", fig.width=8, 
               fig.height=5, out.width="0.7\\linewidth", 
               size="scriptsize")

exp.dat = data.frame( ID=c("a","b","c","d"), 
      cond = c("AI","DI","DI","AI"),
			trial1 = c("E","U","U","E"),
			dec1 = c(1,1,0,1),
			trial2 = c("U","E","U","E"),
			dec2 = c(0,0,0,1),
				trial3 = c("U","E","E","U"),
			dec3 = c(0,1,0,1),
				trial4 = c("E","U","E","U"),
			dec4 = c(0,1,0,0) )
```

This chapter is a complete hodge-podge of small things that tend to bite students, especially when they are dealing with messy data that they might have for final projects.

In particular, as you learn R, there's lots of good tricks you'll never know about until somebody shows you. Clean code is one such good trick; consider the following: "Your most important collaborator is you from 6 months ago. Unfortunately, you can't ask that-you any questions, because they don't answer their email."

So onwards with a few things that you may find useful, either now or later.

## Some principles to live by

### Watch Tricky letter and number confusion in code

The letter "l" looks like the number "1"---watch out for that. Things like "mylm" are usually all letters, with "lm" standing for linear model.

### Write in a good R style

Try to do the following

-   Comment your code!
-   Structure your R file like so:
    -   Descriptive comments (including date)
    -   Load libraries
    -   Constants and script parameters (# iterations, etc.)
    -   Functions (with descriptive comment after first line)
    -   Everything else
-   Naming: variableName / variable.name, FunctionVerb, kConstantName. not_like_this
-   Indentation: 2-space indents is nice
-   Spaces are ok, but don't go overboard.  E.g., `y = (a * x) + b + rnorm(1, sd=sigma)`
-   Never use `attach()`


### Save and load R objects to save time

If you have the result of something that took awhile to run (e.g., a big multilevel model fit to a lot of data) you can try saving it like so:

```{r, eval=FALSE}
myBigThing = lm(mpg ~ disp, data=mtcars) #something slow
saveRDS(myBigThing, savedPath)

## Later on:
myBigThing <- readRDS(savedPath)
```

### Reproduce randomness with `set.seed`

If your code uses random numbers, then you should set your seed, which makes your script always generate the same sequence of random numbers.

For example, say your code had this:

```{r}
tryCatch({(1:(1:10)[rpois(1, 3)])}, error=function(e){(e)}) #works?
set.seed(97)
tryCatch({(1:(1:10)[rpois(1, 3)])}, error=function(e){(e)}) #fails!
```

(Note the `tryCatch()` method is a way of generating errors and not crashing.)

Key thing to know: **Reproducible results help with debugging.**

If you want to get fancy, try this (after installing the \`TeachingDemos' package):

```{r}
TeachingDemos::char2seed("quinn") 
# Using your name as a seed says "nothing up my sleeve"
```

### Keep your files organized

Ever seen this?

-   /My Documents
    -   my paper.tex
    -   my paper draft 2.tex
    -   my paper final.tex
    -   my paper final revised.tex
    -   my paper final revised 2.tex
    -   script.r
    -   script 2.r
    -   data.csv

Try instead something like:

-   /stat 166-Small Data Analysis
    -   stat 166.rproj
    -   /Empty Project
        -   /code
        -   /data
        -   /text
        -   /figures
        -   readme.txt
    -   /HW1
        -   ...

Your `readme.txt` might have informational notes such as "Got data from bit.ly/XYZ." to remind you of what you were up to.

Your `figures` folder should be full of figures you can easily regenerate with code in your `code` folder.

### Make sure your data are numeric

Sometimes when you load data in, R does weird things like decide all your numbers are actually words. This happens if some of your entries are not numbers. Then R makes them all not numbers. You can check this with the `str()` function:

```{r StrDemo}
str( exp.dat )
```

Here we see that we have factors (categorical variables) and numbers (num). All is well.

If something should be a number, then change it like so:

```{r ChangeToNum}
lst <-  c( 1, 2, 3, "dog", 5, 6 )
str( lst )
lst <- as.numeric( lst )
lst
str( lst )
```

Note it warned you that you had non-numbers when you converted. The non-numbers are now missing (NA).

For a dataframe, you fix like this:

```{r ChangeToNumDF}
exp.dat$trial1 = as.numeric( exp.dat$trial1 )
```


### Categories should be words

For categorical variables, don't use numbers, if at all possible.  E.g.,

```{r}
levels = c( "Low", "Middle", "High", NA )
```
is better than
```{r}
levels = c(1, 2, 3, 99 )
```


## Data Wrangling

We next give some high level data wrangling advice. But really, check out R for DS for much more and much better on the merging and summarizing topics.

### Handling Lagged Data

Sometimes you have multiple times for your units (think country or state), and you want to regress, say, future X on current X. Then you want to have both future and current X for each case.

Here think of a case as a Country at a point in time. E.g., we might have data like this:

```{r}
dtw = read.csv( "data/fake_country_block.csv", as.is=TRUE )
dt = pivot_longer( dtw, cols=X1997:X2004,
                   names_to = "Year", names_prefix = "X",
                   values_to = "X" )
dt$Year = as.numeric( dt$Year )
slice_sample( dt, n=5 )
```

We then want to know what the X will be 2 years in the future. We can do this with the following trick:

```{r LaggedYear}
dt.fut = dt
dt.fut$Year = dt.fut$Year - 2
head(dt.fut)
newdt = left_join( dt, dt.fut, 
                   by=c("Country","Year"), suffix=c("",".fut") )
head( newdt, 10 )
```

Here we are merging records that match \emph{both} Country and Year.

Note that for the final two China entries, we don't have a future X value. The merge will make it NA indicating it is missing.

How this works: we are tricking the program. We are making a new \\verb\|dt.lag\| data.frame and then putting all the entries into the past by two years. When we merge, and match on Country and Year, the current dataframe and the lagged dataframe get lined up by this shift. Clever, no?

Now we could do regression:

```{r RegExample}
my.lm = lm( X.fut ~ X + Country, data=newdt )
summary( my.lm )
```

<!--
````{=html}
For organized data, where you know the years are in ascending order with no skips, you can also use the `lead()` and `lag()` methods:
```{r, eval=FALSE}
dt <- dt %>%
  arrange( Country, Year ) %>%
  group_by( Country ) %>%
  mutate( X.fut = dplyr::lead( X, 2 ) )
print( dt, n = 11 )
```
````
-->


### Quick overview of merging data

Often you have two datasets that you want to merge. For example, say you want to merge some data you have on a few states with some SAT information from the mosaic package.

```{r MergeState}
library( mosaicData )
data( SAT )
head( SAT )
df = data.frame( state=c("Alabama","California","Fakus"), 
                A=c(10,20,50), 
                frac=c(0.5, 0.3, 0.4) )
df
merge( df, SAT, by="state", all.x=TRUE )
```

The records are combined by the "by" variable. I.e., each record in df is matched with each record in SAT with the same value of "state."

Things to note: If you have the same variable in each dataframe, it will keep both, and add a suffix of ".x" and ".y" to indicate where they came from.

The "all.x" means keep all records from your first dataframe (here df) even if there is no match. If you added "all.y=TRUE" then you would get all 50 states from the SAT dataframe even though df doesn't have most of them. Try it!

You can merge on more than one variable. I.e., if you said \\verb\|by=c("A","B")\| then it would match records if they had the same value for both A and B. See below for an example on this.

### Summarizing/aggregating Data

Sometimes you want to collapse several cases into one. This is called aggregating. If you install a package called "dplyr" (Run `install.packages( "dplyr" )` once to install, or better yet simply install `tidyverse`) then you will have great power.

Using `newdt` from above, we can summarize countries across all their time points:

```{r PlyrSummarize}
newdt %>% group_by( Country ) %>% 
    summarise( mean.X = mean(X, na.rm=TRUE ),
        sd.X = sd( X, na.rm=TRUE ) )
```

You can also augment data by adding new variables. You can even do this within groups.
Here we subtract the mean from each group:

```{r PlyrSummarize2}
dshift = newdt %>% group_by( Country ) %>%
    mutate( Xm = mean(X, na.rm=TRUE),
            Xc = X - mean(X, na.rm=TRUE ) )
head(dshift)
```



### Making Data Frames on the fly

For small datasets, you can type in data the hard way like so:

```{r MakeFakeData}
exp.dat = data.frame( ID=c("a","b","c","d"), 
      cond = c("AI","DI","DI","AI"),
			trial1 = c("E","U","U","E"),
			dec1 = c(1,1,0,1),
			trial2 = c("U","E","U","E"),
			dec2 = c(0,0,0,1),
				trial3 = c("U","E","E","U"),
			dec3 = c(0,1,0,1),
				trial4 = c("E","U","E","U"),
			dec4 = c(0,1,0,0) )
exp.dat  
```

This is for an experiment on 4 subjects. The first and forth subject got the AI treatment, the second two got the DI treatment. The subjects then had 4 trials each, and they received a "E" choice or a "U" choice, and the decision variable is whether they accepted the choice.

As you can see, data can get a bit complicated!

